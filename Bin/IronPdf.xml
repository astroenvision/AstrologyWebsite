<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IronPdf</name>
    </assembly>
    <members>
        <member name="T:IronPdf.NamespaceDoc">
            <summary>
            IronPDF is a .NET library allowing the generation and manipulation of PDF files in C# and other .Net projects.
            Supports .Net 4.0 and above , .Net Standard 2.x and .Net Core 2 &amp; 3
            </summary>
        </member>
        <member name="T:IronPdf.Installation">
            <summary>
            Global installation and setup preferences for all instances of IronPDF
            </summary>
        </member>
        <member name="F:IronPdf.Installation.LinuxAndDockerDependenciesAutoConfig">
            <summary>
            If <c>true</c> The necessary package dependencies for IronPDf rendering will we automatically installed to Docker and Debian / Ubuntu Linux deployments.
             <para>Applies only to IronPDF for .Net Core.</para>
            <para>This will take a few minutes the next time you run IronPDF. Watch the Visual Studio "Output" window for progress.</para>
            <para>Set this to false if manual Docker / Linux setup is more convenient: https://ironpdf.com/docs/questions/docker-linux/ </para>
            </summary>
        </member>
        <member name="F:IronPdf.Installation.LegacyIIS">
            <summary>
             Reduces the risk of locked resources and un-handled interop exceptions within of Microsoft IIS on windows platforms.
             May for Microsoft IIS versions 7 and lower.
            </summary>
        </member>
        <member name="P:IronPdf.Installation.TempFolderPath">
             <summary>
             The temporary folder path which temporary files and rendering engine DLLs will be deployed to where necessary.
             The default location is the system temp folder which is appropriate for most use cases.
             </summary>
            
        </member>
        <member name="T:IronPdf.Util">
            <summary>
            Useful methods for working with HTML and PDF files.
            </summary>
        </member>
        <member name="M:IronPdf.Util.ImageToDataUri(System.Drawing.Image,System.Boolean)">
            <summary>
             Turns a System.Drawing.Image or System.Drawing.Bitmap into a DataUri which can used to embed the Image directly into an HTML document.
              <para>Read standard <see href="https://en.wikipedia.org/wiki/Data_URI_scheme">https://en.wikipedia.org/wiki/Data_URI_scheme</see> </para>
            </summary>
            <param name="Image">A non-null System.Drawing.Image or System.Drawing.Bitmap</param>
            <param name="Rasterize">Optional flag to flatten the image to raw pixels to increase compatibility with HTML (may affect PDF file size and rendering time)</param>
            <returns> A data URL which can be used as the src attribute of an HTML &lt;img tag</returns>
        </member>
        <member name="T:IronPdf.TempFolder">
            <summary>
            Provides operations over the temporary folder
            </summary>
        </member>
        <member name="M:IronPdf.TempFolder.CleanupTempImages(System.Nullable{System.TimeSpan})">
            <summary>
            Method to remove temporary images from <see cref="P:IronPdf.Installation.TempFolderPath"/>
            <para>
            If you used a custom <see cref="P:IronPdf.Installation.TempFolderPath"/>
            then set <see cref="P:IronPdf.Installation.TempFolderPath"/> to point towards your deployment directory before you call this cleanup method.
            </para>
            </summary>
            <param name="expirationTime">Time from last access for files to delete. All files are deleted by default.</param>
        </member>
        <member name="T:IronPdf.VersionInfo">
            <exclude />
        </member>
        <member name="P:IronPdf.VersionInfo.IronPdfAssemblyVersion">
            <exclude />
        </member>
        <member name="T:IronPdf.HtmlToPdf">
            <summary>
            IronPdf.HtmlToPdf allows any web page or Html 'snippet' to be turned into a PDF document.
            </summary>
        </member>
        <member name="M:IronPdf.HtmlToPdf.StaticRenderUrlAsPdf(System.Uri,IronPdf.PdfPrintOptions,IronPdf.HttpLoginCredentials)">
             <summary>    Static version of the <see cref="M:IronPdf.HtmlToPdf.RenderUrlAsPdf(System.Uri)"/> function.  Renders all Html and assets at a given Url into a PDF file.</summary>
            
            
            
             <param name="Url">              An absolute Uri.  Points to the Html document to be rendered as a PDF. </param>
             <param name="PrintOptions">     Instance of  <see cref='T:IronPdf.PdfPrintOptions'/>. Optional print
                                             options and settings. </param>
             <param name="LoginCredentials"> Instance of  <see cref='T:IronPdf.HttpLoginCredentials'/>.
                                             Optional login credentials for Windows, Linux and Html Form
                                             login environments. </param>
            
              <returns> A <see cref='T:IronPdf.PdfDocument'/>  </returns>
        </member>
        <member name="M:IronPdf.HtmlToPdf.StaticRenderUrlAsPdf(System.String,IronPdf.PdfPrintOptions,IronPdf.HttpLoginCredentials)">
             <summary>    Static version of the <see cref="M:IronPdf.HtmlToPdf.RenderUrlAsPdf(System.String)"/> function.  Renders all Html and assets at a given Url into a PDF file.</summary>
            
            
            
             <param name="UrlOrPath">        An absolute Url or file path.  Points to the Html document to be rendered as a PDF. </param>
             <param name="PrintOptions">     Instance of  <see cref='T:IronPdf.PdfPrintOptions'/>. Optional print
                                             options and settings. </param>
             <param name="LoginCredentials"> Instance of  <see cref='T:IronPdf.HttpLoginCredentials'/>.
                                             Optional login credentials for Windows, Linux and Html Form
                                             login environments. </param>
            
              <returns> A <see cref='T:IronPdf.PdfDocument'/>  </returns>
        </member>
        <member name="M:IronPdf.HtmlToPdf.StaticRenderHTMLFileAsPdf(System.String,IronPdf.PdfPrintOptions)">
             <summary>   Renders an HTML file as PDF binary data. </summary>
            
            
             <param name="FilePath">  Path to an Html file.</param>
             <param name="PrintOptions">     Instance of  <see cref='T:IronPdf.PdfPrintOptions'/>. Optional print options and settings. </param>
             <returns>   A <see cref="T:IronPdf.PdfDocument"/> </returns>
        </member>
        <member name="M:IronPdf.HtmlToPdf.StaticRenderHtmlAsPdf(System.String,System.String,IronPdf.PdfPrintOptions,System.String)">
             <summary>
                 Static version of the <see cref="M:IronPdf.HtmlToPdf.RenderHtmlAsPdf(System.String,System.String,System.String)"/> function.  Renders any Html strings into a
                 PDF document.
             </summary>
            
            
            
             <param name="Html">     Html to be turned into a PDF. </param>
             <param name="BaseUrlOrPath">  Setting the BaseUrlOrPath property gives the Html a relative for content links such as hyper-links, images, CSS and JavaScript files.</param>
             <param name="PrintOptions">     Instance of  <see cref='T:IronPdf.PdfPrintOptions'/>. Optional print options and settings. </param>
             <param name="Proxy"> Specifies an Http proxy server.   Use the pattern: http(s)://user-name:password@host:port/</param>
            
             <returns> A <see cref='T:IronPdf.PdfDocument'/>  </returns>
        </member>
        <member name="M:IronPdf.HtmlToPdf.StaticRenderHtmlAsPdf(System.String,IronPdf.PdfPrintOptions)">
            <summary>
            Static version of the <see cref="M:IronPdf.HtmlToPdf.RenderHtmlAsPdf(System.String,System.String,System.String)" /> function.  Renders any Html strings into a
            PDF document.
            </summary>
            <param name="Html">Html to be turned into a PDF.</param>
            <param name="PrintOptions">Instance of  <see cref="T:IronPdf.PdfPrintOptions" />. Optional print options and settings.</param>
            <returns>
            A <see cref="T:IronPdf.PdfDocument" />
            </returns>
        </member>
        <member name="M:IronPdf.HtmlToPdf.StaticRenderHtmlAsPdf(System.String,System.Uri,IronPdf.PdfPrintOptions,System.String)">
             <summary>
                 Static version of the <see cref="M:IronPdf.HtmlToPdf.RenderHtmlAsPdf(System.String,System.Uri,System.String)"/> function.  Renders any Html strings into a
                 PDF document.
             </summary>
            
            
            
             <param name="Html">     Html to be turned into a PDF. </param>
             <param name="BaseUrl">  Setting the BaseURL property gives the Html a relative for content links such as hyper-links, images, CSS and JavaScript files.</param>
             <param name="PrintOptions">     Instance of  <see cref='T:IronPdf.PdfPrintOptions'/>. Optional print options and settings. </param>
             <param name="Proxy"> Specifies an Http proxy server.   Use the pattern: http(s)://user-name:password@host:port/</param>
            
             <returns> A <see cref='T:IronPdf.PdfDocument'/>  </returns>
        </member>
        <member name="M:IronPdf.HtmlToPdf.RenderUrlAsPdf(System.Uri)">
             <summary>   Renders the URL as PDF binary data. </summary>
            
            
             <param name="Url"> An absolute Uri.  Points to the Html document to be rendered as a PDF. </param>
            
             <returns>   A <see cref="T:IronPdf.PdfDocument"/> </returns>
            
             <example>
                 <code>HtmlToPdf myHtmlToPdf = new IronPdf.HtmlToPdf();
                  Uri  myUri = new Uri("http://www.example.com");
                  myHtmlToPdf.RenderUrlAsPdf(myUri).SaveAs(@"Path\File.Pdf");
                 </code>
             </example>
        </member>
        <member name="M:IronPdf.HtmlToPdf.RenderUrlAsPdf(System.String)">
             <summary>   Renders the URL as PDF binary data. </summary>
            
            
             <param name="UrlOrPath"> A url or file path.</param>
            
             <returns>   A <see cref="T:IronPdf.PdfDocument"/> </returns>
        </member>
        <member name="M:IronPdf.HtmlToPdf.RenderHTMLFileAsPdf(System.String)">
             <summary>   Renders an HTML file  as PDF binary data. </summary>
            
            
             <param name="FilePath">  Path to an Html file.</param>
            
             <returns>   A <see cref="T:IronPdf.PdfDocument"/> </returns>
        </member>
        <member name="M:IronPdf.HtmlToPdf.RenderHtmlAsPdf(System.String,System.Uri,System.String)">
            <summary>
            Creates a PDF file from an Html string, and returns it as an  IronPdf.PdfDocument
            </summary>
            <param name="Html">The Html to be rendered as a PDF.</param>
            <param name="BaseUrl">Setting the BaseURL property gives the relative context for hyper-links, images, CSS and JavaScript files.</param>
            <param name="Proxy">Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port</param>
            <returns>
            A <see cref="T:IronPdf.PdfDocument" />
            </returns>
            <example>
              <code>HtmlToPdf myHtmlToPdf = new IronPdf.HtmlToPdf();
            myHtmlToPdf.RenderHtmlAsPdf("&lt;p&gt;html&lt;/p&gt;").SaveAs(@"Path\File.Pdf");
            </code>
            </example>
        </member>
        <member name="M:IronPdf.HtmlToPdf.RenderHtmlAsPdf(System.String,System.String,System.String)">
            <summary>
            Creates a PDF file from an Html string, and returns it as an  IronPdf.PdfDocument
            </summary>
            <param name="Html">The Html to be rendered as a PDF.</param>
            <param name="BaseUrlOrPath">Setting the BaseUrlOrPath property gives the relative context for hyper-links, images, CSS and JavaScript files.</param>
            <param name="Proxy">Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port</param>
            <returns>
            A <see cref="T:IronPdf.PdfDocument" />
            </returns>
            <example>
              <code>HtmlToPdf myHtmlToPdf = new IronPdf.HtmlToPdf();
            myHtmlToPdf.RenderHtmlAsPdf("&lt;p&gt;html&lt;/p&gt;").SaveAs(@"Path\File.Pdf");
            </code>
            </example>
        </member>
        <member name="F:IronPdf.HtmlToPdf.PrintOptions">
            <summary>
            An instance of the <see cref="T:IronPdf.PdfPrintOptions"/>  class.
            Sets PDF output options such as Paper-Size, DPI, Headers and Footers.
            </summary>
        </member>
        <member name="F:IronPdf.HtmlToPdf.LoginCredentials">
             <summary>
             An instance of the <see cref="T:IronPdf.HttpLoginCredentials"/>  class.  Allows developers to specify login credentials using  Windows, Linux or Html Forms based authentication.
             This allows PDFs to be printed, even if they reside on private Intranets, Extranets or within 'login' areas of websites.
            
             </summary>
        </member>
        <member name="M:IronPdf.HtmlToPdf.#ctor">
            <summary>
            The IronPdf.HtmlToPdf allows developers to create PDF files from any web page or Html Snippet
            </summary>
        </member>
        <member name="M:IronPdf.HtmlToPdf.#ctor(IronPdf.PdfPrintOptions)">
            <param name='PrintOptions'>Sets PDF output options such as paper-size, DPI, headers and footers using an instance of the IronPdf.PdfPrintOptions Class.</param>
        </member>
        <member name="T:IronPdf.AspxToPdf">
             <summary>
                 Renders any .Net Web Page (ASPX) into a PDF Document. Simply add it to  the Page_Load
                 event.
                 
             <para>Not available in .Net Core because ASPX is superseded by the MVC model</para>
             </summary>
            
            
        </member>
        <member name="T:IronPdf.AspxToPdf.FileBehavior">
             <summary>
                 Determines the web browser behavior towards a PDF document. 
             </summary>
            
             
        </member>
        <member name="F:IronPdf.AspxToPdf.FileBehavior.Attachment">
            <summary>Instructs the user's web-browser to download the PDF as a file.</summary>
        </member>
        <member name="F:IronPdf.AspxToPdf.FileBehavior.InBrowser">
            <summary>Instructs the user's web-browser to render the PDF wherever possible.</summary>
        </member>
        <member name="M:IronPdf.AspxToPdf.RenderThisPageAsPdf(IronPdf.AspxToPdf.FileBehavior,System.String,IronPdf.PdfPrintOptions)">
             <summary>
                 Automatically renders any ASPX page into PDF instead of Html.  Use it in the Page_Load
                 Event.
                   <para>Example:</para>
                  <code>protected void Page_Load(object sender, EventArgs e){ 
                   IronPdf.AspxToPdf.RenderThisPageAsPdf(FileBehavior.Attachment, "MyPdf.pdf", new  PdfPrintOptions(){ Dpi = 300 });
                 }
                 </code>
             </summary>
            
             
            
             <param name="PdfBehavior"> Specifies if the PDF file should be downloaded as an attachment,
                                         or displayed directly in the browser of users. </param>
             <param name="PdfFileName">  The file-name of the PDF.  If no name is set, a suitable name
                                         will be automatically assigned chosen based on the Html title,
                                         PrintOptions or name of the ASPX page. </param>
             <param name="PrintOptions"> Sets PDF output options such as PDF Title, paper-size, DPI,
                                         headers and footers. </param>
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.IronDeployment">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IronDeployment.#ctor(System.String)">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.IronDeployment.DeploymentRoot">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IronDeployment.Deploy">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.IronDeployment.Path">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.CropSettings">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.CropSettings.Top">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.CropSettings.Bottom">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.CropSettings.Width">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.CropSettings.Height">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.FooterSettings">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.FooterSettings.CenterText">
            <summary>
            Sets center text for the header/footer. Following replaces occur in this text:
            * [page]       Replaced by the number of the pages currently being printed
            * [frompage]   Replaced by the number of the first page to be printed
            * [topage]     Replaced by the number of the last page to be printed
            * [webpage]    Replaced by the URL of the page being printed
            * [section]    Replaced by the name of the current section
            * [subsection] Replaced by the name of the current subsection
            * [date]       Replaced by the current date in system local format
            * [time]       Replaced by the current time in system local format
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.FooterSettings.ContentSpacing">
            <summary>
            Amount of space between header/footer and content in millimeters
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.FooterSettings.FontName">
            <summary>
            Font name for the header, e.g. "Courier New"
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.FooterSettings.FontSize">
            <summary>
            The font size in pt
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.FooterSettings.HtmlUrl">
            <summary>
            URL for the HTML document to use as a header
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.FooterSettings.LeftText">
            <summary>
            Sets left text for the header/footer. Following replaces occur in this text:
            * [page]       Replaced by the number of the pages currently being printed
            * [frompage]   Replaced by the number of the first page to be printed
            * [topage]     Replaced by the number of the last page to be printed
            * [webpage]    Replaced by the URL of the page being printed
            * [section]    Replaced by the name of the current section
            * [subsection] Replaced by the name of the current subsection
            * [date]       Replaced by the current date in system local format
            * [time]       Replaced by the current time in system local format
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.FooterSettings.RightText">
            <summary>
            Sets right text for the header/footer. Following replaces occur in this text:
            * [page]       Replaced by the number of the pages currently being printed
            * [frompage]   Replaced by the number of the first page to be printed
            * [topage]     Replaced by the number of the last page to be printed
            * [webpage]    Replaced by the URL of the page being printed
            * [section]    Replaced by the name of the current section
            * [subsection] Replaced by the name of the current subsection
            * [date]       Replaced by the current date in system local format
            * [time]       Replaced by the current time in system local format
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.FooterSettings.UseLineSeparator">
            <summary>
            Whether or not to print a line between the header/footer and content (Default: false)
            </summary>
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.DocumentColorMode">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.DocumentColorMode.Color">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.DocumentColorMode.Grayscale">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.DocumentOutputFormat">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.DocumentOutputFormat.PDF">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.DocumentOutputFormat.PS">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.PaperOrientation">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.PaperOrientation.Portrait">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.PaperOrientation.Landscape">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.ViewportSize">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.Collate">
            <summary>
            Whether to collate the copies. (Default: false)
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.ColorMode">
            <summary>
            Whether to print in color or gray-scale. (Default: color)
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.CookieJar">
            <summary>
            The path of a file used to store cookies.
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.Copies">
            <summary>
            How many copies to print. (Default: 1)
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.DocumentTitle">
            <summary>
            The title of the PDF document.
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.DPI">
            <summary>
            The DPI to use when printing.
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.DumpOutline">
            <summary>
            The path of a file to dump an XML outline of the document to.
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.ImageDPI">
            <summary>
            The maximum DPI to use for images printed in the document.
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.ImageQuality">
            <summary>
            Gets or sets the image quality.
            </summary>
            <value>
            The image quality.
            </value>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.Margins">
            <summary>
            The margins to use throughout the document.
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.Orientation">
            <summary>
            The orientation of the output document, either Portrait or Landscape. (Default: Portrait)
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.OutlineDepth">
            <summary>
            The maximum depth of the outline. (Default: 4)
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.OutputFile">
            <summary>
            A path to output the converted document to.
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.OutputFormat">
            <summary>
            Whether to output PDF or PostScript. (Default: PDF)
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.PageOffset">
            <summary>
            A number that is added to all page numbers when printing headers, footers and table of content.
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.PaperSize">
            <summary>
            The size of the output document.
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.ProduceOutline">
            <summary>
            Whether to generate an outline for the document. (Default: false)
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.UseCompression">
            <summary>
            Whether to use lossless compression when creating the PDF file. (Default: true)
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.PaperHeight">
            <summary>
            The height of the output document, e.g. "12in".
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ChromeRenderingGlobalSettings.PaperWidth">
            <summary>
            The with of the output document, e.g. "4cm".
            </summary>
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.HeaderSettings">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HeaderSettings.CenterText">
            <summary>
            Sets center text for the header/footer. Following replaces occur in this text:
            * [page]       Replaced by the number of the pages currently being printed
            * [frompage]   Replaced by the number of the first page to be printed
            * [topage]     Replaced by the number of the last page to be printed
            * [webpage]    Replaced by the URL of the page being printed
            * [section]    Replaced by the name of the current section
            * [subsection] Replaced by the name of the current subsection
            * [date]       Replaced by the current date in system local format
            * [time]       Replaced by the current time in system local format
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HeaderSettings.ContentSpacing">
            <summary>
            Amount of space between header/footer and content in millimeters
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HeaderSettings.FontName">
            <summary>
            Font name for the header, e.g. "Courier New"
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HeaderSettings.FontSize">
            <summary>
            The font size in pt
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HeaderSettings.HtmlUrl">
            <summary>
            URL for the HTML document to use as a header
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HeaderSettings.LeftText">
            <summary>
            Sets left text for the header/footer. Following replaces occur in this text:
            * [page]       Replaced by the number of the pages currently being printed
            * [frompage]   Replaced by the number of the first page to be printed
            * [topage]     Replaced by the number of the last page to be printed
            * [webpage]    Replaced by the URL of the page being printed
            * [section]    Replaced by the name of the current section
            * [subsection] Replaced by the name of the current subsection
            * [date]       Replaced by the current date in system local format
            * [time]       Replaced by the current time in system local format
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HeaderSettings.UseLineSeparator">
            <summary>
            Whether or not to print a line between the header/footer and content (Default: false)
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HeaderSettings.RightText">
            <summary>
            Sets right text for the header/footer. Following replaces occur in this text:
            * [page]       Replaced by the number of the pages currently being printed
            * [frompage]   Replaced by the number of the first page to be printed
            * [topage]     Replaced by the number of the last page to be printed
            * [webpage]    Replaced by the URL of the page being printed
            * [section]    Replaced by the name of the current section
            * [subsection] Replaced by the name of the current subsection
            * [date]       Replaced by the current date in system local format
            * [time]       Replaced by the current time in system local format
            </summary>
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.HtmlToImageDocument">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HtmlToImageDocument.ScreenHeight">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HtmlToImageDocument.ScreenWidth">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HtmlToImageDocument.Quality">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HtmlToImageDocument.Format">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HtmlToImageDocument.Out">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HtmlToImageDocument.In">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HtmlToImageDocument.Transparent">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HtmlToImageDocument.CropSettings">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HtmlToImageDocument.LoadSettings">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HtmlToImageDocument.WebSettings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.HtmlToImageDocument.GetObjects">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.HtmlToPdfDocument">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.HtmlToPdfDocument.#ctor">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.HtmlToPdfDocument.#ctor(System.String)">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HtmlToPdfDocument.Objects">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.HtmlToPdfDocument.GetObjects">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.HtmlToPdfDocument.GlobalSettings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.HtmlToPdfDocument.op_Implicit(System.String)~IronPdf.ThreadSaftyManager.HtmlToPdfDocument">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.NamespaceDoc">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.LoadSettings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.LoadSettings.#ctor">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.LoadSettings.ContentErrorHandling">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.LoadSettings.ContentErrorHandling.Abort">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.LoadSettings.ContentErrorHandling.Skip">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.LoadSettings.ContentErrorHandling.Ignore">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.BlockLocalFileAccess">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.Cookies">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.CustomHeaders">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.DebugJavascript">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.ErrorHandling">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.Password">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.PostItems">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.Proxy">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.RenderDelay">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.RepeatCustomHeaders">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.StopSlowScript">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.Username">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.WindowStatus">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.LoadSettings.ZoomFactor">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.MarginSettings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.MarginSettings.#ctor">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.MarginSettings.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.MarginSettings.Bottom">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.MarginSettings.Left">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.MarginSettings.Right">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.MarginSettings.Top">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.MarginSettings.All">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.MarginSettings.Unit">
            <summary>
            Defaults to Inches.
            </summary>
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.ObjectSettings">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ObjectSettings.IncludeInOutline">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ObjectSettings.CountPages">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ObjectSettings.PageUrl">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ObjectSettings.ProduceForms">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ObjectSettings.ProduceExternalLinks">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ObjectSettings.ProduceLocalLinks">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ObjectSettings.FooterSettings">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ObjectSettings.HeaderSettings">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ObjectSettings.HtmlText">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ObjectSettings.LoadSettings">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ObjectSettings.RawData">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ObjectSettings.WebSettings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ObjectSettings.GetData">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ObjectSettings.op_Implicit(System.String)~IronPdf.ThreadSaftyManager.ObjectSettings">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.PkPaperSize">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.PkPaperSize.#ctor(System.String,System.String)">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.PkPaperSize.Height">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.PkPaperSize.Width">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.PkPaperSize.op_Implicit(System.Drawing.Printing.PaperKind)~IronPdf.ThreadSaftyManager.PkPaperSize">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.PostItem">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.PostItem.Name">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.PostItem.Value">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.PostItem.IsFile">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.Unit">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.Unit.Inches">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.Unit.Millimeters">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.Unit.Centimeters">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.WebSettings">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.WebSettings.DefaultEncoding">
            <summary>
            What encoding should we guess content is using if they do not specify it properly? E.g. "utf-8"
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.WebSettings.EnableIntelligentShrinking">
            <summary>
            Whether or not to enable intelligent compression of content to fit in the page
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.WebSettings.EnableJavascript">
            <summary>
            Whether or not to enable JavaScript
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.WebSettings.EnablePlugins">
            <summary>
            Whether to enable plugins (maybe like Flash? unsure)
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.WebSettings.LoadImages">
            <summary>
            Whether or not to load images
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.WebSettings.MinimumFontSize">
            <summary>
            The minimum font size to use
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.WebSettings.PrintBackground">
            <summary>
            Whether or not to print the background on elements
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.WebSettings.PrintMediaType">
            <summary>
            Whether to print the content using the print media type instead of the screen media type
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.WebSettings.UserStyleSheet">
            <summary>
            Path to a user specified style sheet
            </summary>
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.BeginEventArgs">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.BeginEventArgs.Document">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.BeginEventArgs.ExpectedPhaseCount">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.ErrorEventArgs">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ErrorEventArgs.Document">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ErrorEventArgs.ErrorMessage">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.FinishEventArgs">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.FinishEventArgs.Document">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.FinishEventArgs.Success">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.PhaseChangeEventArgs">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.PhaseChangeEventArgs.Document">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.PhaseChangeEventArgs.PhaseNumber">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.PhaseChangeEventArgs.PhaseDescription">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.ProgressChangeEventArgs">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ProgressChangeEventArgs.Document">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ProgressChangeEventArgs.Progress">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ProgressChangeEventArgs.ProgressDescription">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.WarningEventArgs">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.WarningEventArgs.Document">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.WarningEventArgs.WarningMessage">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.ImageToolset">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.ImageToolset.Unloaded">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ImageToolset.Deployment">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.ImageToolset.Loaded">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.#ctor">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.#ctor(IronPdf.ThreadSaftyManager.IDeployment)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.Load(IronPdf.ThreadSaftyManager.IDeployment)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.Unload">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.InitializeLifetimeService">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.CreateGlobalSettings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.CreateObjectSettings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.SetGlobalSetting(System.IntPtr,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.GetGlobalSetting(System.IntPtr,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.SetObjectSetting(System.IntPtr,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.GetObjectSetting(System.IntPtr,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.CreateConverter(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.DestroyConverter(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.SetWarningCallback(System.IntPtr,IronPdf.ThreadSaftyManager.StringCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.SetErrorCallback(System.IntPtr,IronPdf.ThreadSaftyManager.StringCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.SetFinishedCallback(System.IntPtr,IronPdf.ThreadSaftyManager.IntCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.SetPhaseChangedCallback(System.IntPtr,IronPdf.ThreadSaftyManager.VoidCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.SetProgressChangedCallback(System.IntPtr,IronPdf.ThreadSaftyManager.IntCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.PerformConversion(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.AddObject(System.IntPtr,System.IntPtr,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.AddObject(System.IntPtr,System.IntPtr,System.Byte[])">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.GetPhaseNumber(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.GetPhaseCount(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.GetPhaseDescription(System.IntPtr,System.Int32)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.GetProgressDescription(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.GetHttpErrorCode(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ImageToolset.GetConverterResult(System.IntPtr)">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.IConverter">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IConverter.Convert(IronPdf.ThreadSaftyManager.IDocument)">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.IConverter.Begin">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.IConverter.Warning">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.IConverter.Error">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.IConverter.PhaseChange">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.IConverter.ProgressChange">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.IConverter.Finish">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.IConverter.Toolset">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.IDeployment">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.IDeployment.Path">
            <summary>
            Represent a path to a folder that contains the wkhtmltox.dll 
            library and any dependencies it may have.
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.IDeployment.DeploymentRoot">
            <summary>
            Represent a path to a deployment root where IronPdf folder is created
            </summary>
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IDeployment.Deploy">
            <summary>
            Deploys wkhtlmtopdf dependencies to the specified path
            </summary>
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.IDocument">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IDocument.GetObjects">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.IObject">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IObject.GetData">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.ISettings">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.IToolset">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.Load(IronPdf.ThreadSaftyManager.IDeployment)">
            <summary>
            Loads the toolset's deployment from its path. It must behave importantly,
            performing no operation if the deployment is already loaded.
            </summary>
            <param name="deployment">
            Optionally supplies a specific deployment to be used.
            </param>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.IToolset.Loaded">
            <summary>
            Gets whether the toolset's deployment has been loaded.
            </summary>
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.Unload">
            <summary>
            Unloads the toolset's deployment.
            </summary>
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.IToolset.Unloaded">
            <summary>
            Fires when the toolset's deployment is unloaded.
            </summary>
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.IToolset.Deployment">
            <summary>
            The deployment loaded by (or to be loaded by) the toolset.
            </summary>
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.AddObject(System.IntPtr,System.IntPtr,System.Byte[])">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.AddObject(System.IntPtr,System.IntPtr,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.CreateConverter(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.CreateGlobalSettings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.CreateObjectSettings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.DestroyConverter(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.GetConverterResult(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.GetGlobalSetting(System.IntPtr,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.GetHttpErrorCode(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.GetObjectSetting(System.IntPtr,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.GetPhaseCount(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.GetPhaseDescription(System.IntPtr,System.Int32)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.GetPhaseNumber(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.GetProgressDescription(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.PerformConversion(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.SetErrorCallback(System.IntPtr,IronPdf.ThreadSaftyManager.StringCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.SetFinishedCallback(System.IntPtr,IronPdf.ThreadSaftyManager.IntCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.SetGlobalSetting(System.IntPtr,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.SetObjectSetting(System.IntPtr,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.SetPhaseChangedCallback(System.IntPtr,IronPdf.ThreadSaftyManager.VoidCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.SetProgressChangedCallback(System.IntPtr,IronPdf.ThreadSaftyManager.IntCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.IToolset.SetWarningCallback(System.IntPtr,IronPdf.ThreadSaftyManager.StringCallback)">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.NestingToolset">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.NestingToolset.Unloaded">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.NestingToolset.BeforeUnload">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.NestingToolset.Deployment">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.NestingToolset.Loaded">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.NestingToolset.NestedToolset">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.Load(IronPdf.ThreadSaftyManager.IDeployment)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.Unload">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.InitializeLifetimeService">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.OnBeforeUnload(System.Object)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.AddObject(System.IntPtr,System.IntPtr,System.Byte[])">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.AddObject(System.IntPtr,System.IntPtr,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.CreateConverter(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.CreateGlobalSettings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.CreateObjectSettings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.DestroyConverter(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.GetConverterResult(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.GetGlobalSetting(System.IntPtr,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.GetHttpErrorCode(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.GetObjectSetting(System.IntPtr,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.GetPhaseCount(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.GetPhaseDescription(System.IntPtr,System.Int32)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.GetPhaseNumber(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.GetProgressDescription(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.PerformConversion(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.SetErrorCallback(System.IntPtr,IronPdf.ThreadSaftyManager.StringCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.SetFinishedCallback(System.IntPtr,IronPdf.ThreadSaftyManager.IntCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.SetGlobalSetting(System.IntPtr,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.SetObjectSetting(System.IntPtr,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.SetPhaseChangedCallback(System.IntPtr,IronPdf.ThreadSaftyManager.VoidCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.SetProgressChangedCallback(System.IntPtr,IronPdf.ThreadSaftyManager.IntCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.NestingToolset.SetWarningCallback(System.IntPtr,IronPdf.ThreadSaftyManager.StringCallback)">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.RemotingToolset`1">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.RemotingToolset`1.#ctor(IronPdf.ThreadSaftyManager.IDeployment)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.RemotingToolset`1.Load(IronPdf.ThreadSaftyManager.IDeployment)">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.RemotingToolset`1.Unloaded">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.RemotingToolset`1.Unload">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.StandardConverter">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.StandardConverter.Toolset">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.StandardConverter.ProcessingDocument">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.StandardConverter.#ctor(IronPdf.ThreadSaftyManager.IToolset)">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.StandardConverter.Begin">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.StandardConverter.Error">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.StandardConverter.Finish">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.StandardConverter.PhaseChange">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.StandardConverter.ProgressChange">
            <exclude />
        </member>
        <member name="E:IronPdf.ThreadSaftyManager.StandardConverter.Warning">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.StandardConverter.Convert(IronPdf.ThreadSaftyManager.IDocument)">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.ThreadSafeConverter">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ThreadSafeConverter.#ctor(IronPdf.ThreadSaftyManager.IToolset)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ThreadSafeConverter.Convert(IronPdf.ThreadSaftyManager.IDocument)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ThreadSafeConverter.Invoke``1(IronPdf.ThreadSaftyManager.FuncShim{``0})">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.ThreadSafeConverter.Invoke(IronPdf.ThreadSaftyManager.ActionShim)">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.IntCallback">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.FuncShim`1">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.FuncShim`3">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.ActionShim">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.StringCallback">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.Utf8Marshaler">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.Utf8Marshaler.MarshalManagedToNative(System.Object)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.Utf8Marshaler.MarshalNativeToManaged(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.Utf8Marshaler.CleanUpNativeData(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.Utf8Marshaler.CleanUpManagedData(System.Object)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.Utf8Marshaler.GetNativeDataSize">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.Utf8Marshaler.GetInstance(System.String)">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.VoidCallback">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.WkhtmltoxBindings">
            <exclude />
        </member>
        <member name="F:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.DLLNAME">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.InitLibraryHandler(System.String)">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.WkhtmltopdfAddobject">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_add_object(System.IntPtr,System.IntPtr,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_add_object(System.IntPtr,System.IntPtr,System.Byte[])">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_convert(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_create_converter(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_create_global_settings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_create_object_settings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_current_phase(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_deinit">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_destroy_converter(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_extended_qt">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_get_global_setting(System.IntPtr,System.String,System.Byte*,System.Int32)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_get_object_setting(System.IntPtr,System.String,System.Byte*,System.Int32)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_get_output(System.IntPtr,System.IntPtr@)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_http_error_code(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_init(System.Int32)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltopdf_phase_count(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_phase_description(System.IntPtr,System.Int32)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_progress_string(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_set_error_callback(System.IntPtr,IronPdf.ThreadSaftyManager.StringCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_set_finished_callback(System.IntPtr,IronPdf.ThreadSaftyManager.IntCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_set_global_setting(System.IntPtr,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_set_object_setting(System.IntPtr,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_set_phase_changed_callback(System.IntPtr,IronPdf.ThreadSaftyManager.VoidCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_set_progress_changed_callback(System.IntPtr,IronPdf.ThreadSaftyManager.IntCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.Wkhtmltopdf_set_warning_callback(System.IntPtr,IronPdf.ThreadSaftyManager.StringCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_convert(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_create_converter(System.IntPtr,System.Byte[])">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_create_global_settings">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_current_phase(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_deinit">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_destroy_converter(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_extended_qt">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_get_global_setting(System.IntPtr,System.String,System.Byte*,System.Int32)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_get_output(System.IntPtr,System.IntPtr@)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_http_error_code(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_init(System.Int32)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_phase_count(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_phase_description(System.IntPtr,System.Int32)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_progress_string(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_set_error_callback(System.IntPtr,IronPdf.ThreadSaftyManager.StringCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_set_finished_callback(System.IntPtr,IronPdf.ThreadSaftyManager.IntCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_set_global_setting(System.IntPtr,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_set_phase_changed_callback(System.IntPtr,IronPdf.ThreadSaftyManager.VoidCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_set_progress_changed_callback(System.IntPtr,IronPdf.ThreadSaftyManager.IntCallback)">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxBindings.wkhtmltoimage_set_warning_callback(System.IntPtr,IronPdf.ThreadSaftyManager.StringCallback)">
            <exclude />
        </member>
        <member name="T:IronPdf.ThreadSaftyManager.WkhtmltoxSettingAttribute">
            <exclude />
        </member>
        <member name="P:IronPdf.ThreadSaftyManager.WkhtmltoxSettingAttribute.Name">
            <exclude />
        </member>
        <member name="M:IronPdf.ThreadSaftyManager.WkhtmltoxSettingAttribute.#ctor(System.String)">
            <exclude />
        </member>
        <member name="T:IronPdf.Forms.CheckBoxField">
            <summary>
            Represents a check-box in a PDF form.
            </summary>
            <seealso cref="T:IronPdf.Forms.FormField" />
        </member>
        <member name="P:IronPdf.Forms.CheckBoxField.Value">
            <summary>
            Gets or sets the value of the CheckBoxField as a string.
            </summary>
            <value>
            A typical return value for a checked box is "/Yes", other values mean that the box is not checked.
            </value>
            <seealso cref="P:IronPdf.Forms.CheckBoxField.BooleanValue"/>
        </member>
        <member name="P:IronPdf.Forms.CheckBoxField.BooleanValue">
            <summary>
            Gets or sets a value indicating whether the check-box is checked (ticked).
            </summary>
            <value>
              <c>true</c> if checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IronPdf.Forms.ComboBoxField">
            <summary>
            Represents a combo-box (drop down menu) in a PDF form.
            </summary>
            <seealso cref="T:IronPdf.Forms.FormField" />
        </member>
        <member name="P:IronPdf.Forms.ComboBoxField.SelectedIndex">
            <summary>
            Gets the index of the selected option.
            </summary>
            <value>
            The index of the selected. 0 based.
            </value>
        </member>
        <member name="P:IronPdf.Forms.ComboBoxField.Options">
            <summary>
            Gets the available options for the combo-box in zero based index order.
            </summary>
            <value>
            The option names as strings.
            </value>
        </member>
        <member name="P:IronPdf.Forms.ComboBoxField.Value">
            <summary>
            Gets or sets the text value of the combo-box.
            </summary>
            <value>
            The value as a string.
            </value>
        </member>
        <member name="T:IronPdf.Forms.Enums.FontTypes">
            <summary>
            Enum that represents the list of available fonts for text fields.
            </summary>
        </member>
        <member name="T:IronPdf.Forms.FormField">
            <summary>
            Generic base class from which all PDF Form fields are derived.
            </summary>
        </member>
        <member name="P:IronPdf.Forms.FormField.Name">
            <summary>
            Gets the ID name of this field.
            </summary>
            <value>
            The name as a string.
            </value>
            <seealso cref="M:IronPdf.Forms.PdfForm.GetFieldByName(System.String)"/>
        </member>
        <member name="P:IronPdf.Forms.FormField.ReadOnly">
            <summary>
            Gets or sets the permissions for users to fill-in current form field.
            </summary>
            <value>
              <c>true</c> if form field is readonly, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:IronPdf.Forms.FormField.Value">
            <summary>
            Gets the value of the editable PDF field.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:IronPdf.Forms.FormField.ToString">
            <summary>
            Returns the value of this field.
            </summary>
            <returns>
            The value of this field.
            </returns>
        </member>
        <member name="M:IronPdf.Forms.FormField.SetFont(IronPdf.Forms.Enums.FontTypes,System.Double)">
            <summary>
            Sets the font to the text field of pdf form.
            </summary>
            <param name="fontType">Type of the font.</param>
            <param name="fontSize">Size of the font.</param>
        </member>
        <member name="F:IronPdf.Forms.PdfForm.Fields">
            <summary>
            The editable fields within this PDF.
            </summary>
            <seealso cref="P:IronPdf.PdfDocument.Form"/>
        </member>
        <member name="P:IronPdf.Forms.PdfForm.FieldNames">
            <summary>
             Returns the field name of every editable data field in the PDF.
            </summary>
            <value>
            The field names as an array of strings.
            </value>
        </member>
        <member name="M:IronPdf.Forms.PdfForm.GetFieldByName(System.String)">
            <summary>
            Returns a <see cref="T:IronPdf.Forms.FormField"/> by its name.  This method is fault tolerant and will attempt to match case mistakes and partial field names.
            </summary>
            <param name="FieldName">The name of the field to be edited. This is analogous to the HTML input 'name' attribute when creating a PDF with forms from HTML using IronPDF.</param>
            <returns>A <see cref="T:IronPdf.Forms.FormField"/> object</returns>
        </member>
        <member name="T:IronPdf.Forms.TextField">
            <summary>
            Represents an editable text input field in a PDF document.
            </summary>
            <seealso cref="T:IronPdf.Forms.FormField" />
        </member>
        <member name="P:IronPdf.Forms.TextField.Value">
            <summary>
            Gets or sets the text in the text-box.
            </summary>
            <value>
            Text value as a string.
            </value>
        </member>
        <member name="M:IronPdf.Forms.TextField.SetFont(IronPdf.Forms.Enums.FontTypes,System.Double)">
            <summary>
            Sets the font to the text field of pdf form.
            </summary>
            <param name="fontType">Type of the font.</param>
            <param name="fontSize">Size of the font.</param>
        </member>
        <member name="T:IronPdf.HtmlHeaderFooter">
            <summary>
            A Html Header or Footer which will be printed onto every page of the PDF.    This can be used to override <see cref="F:IronPdf.PdfPrintOptions.Header" /> and <see cref="F:IronPdf.PdfPrintOptions.Footer" />
            <para>When using HtmlHeaderFooter it is important to set <see cref="F:IronPdf.HtmlHeaderFooter.HtmlFragment"/> and <see cref="F:IronPdf.HtmlHeaderFooter.Height"/></para>
            <para> Merge meta-data into your html using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title}</para>
            </summary>
            <seealso cref="F:IronPdf.PdfPrintOptions.Header" />
            <seealso cref="F:IronPdf.PdfPrintOptions.Footer" />
        </member>
        <member name="F:IronPdf.HtmlHeaderFooter.LeftText">
            <exclude />
        </member>
        <member name="F:IronPdf.HtmlHeaderFooter.CenterText">
            <exclude />
        </member>
        <member name="F:IronPdf.HtmlHeaderFooter.RightText">
            <exclude />
        </member>
        <member name="M:IronPdf.HtmlHeaderFooter.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>System.Object of type HtmlHeaderFooter</returns>
        </member>
        <member name="F:IronPdf.HtmlHeaderFooter.Height">
            <summary>
            Height of the Html Header / Footer in millimeters.  This value must be set sufficiently high to display the full html header / footer content.
            </summary>
        </member>
        <member name="F:IronPdf.HtmlHeaderFooter.HtmlFragment">
             <summary>
             The Html which will be use to render the Header / Footer.  Should be  an HTML snippet rather than a complete document.  May contain styles &amp; images.
             <para> Merge meta-data into the HtmlFragment by putting any of these placeholder strings into the text: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title}.  An alternative mail-merge style using the pattern &lt;span class='total-pages'>&lt;/span> also workd</para>
            <para>HtmlFragment is a stand alone HTML document which does not inherit styles or settings from your main HTML content unless <see cref="F:IronPdf.HtmlHeaderFooter.LoadStylesAndCSSFromMainHtmlDocument"/> is set <c>true</c></para>
             </summary>
        </member>
        <member name="F:IronPdf.HtmlHeaderFooter.BaseUrl">
            <summary>
            The Base URL all URLS in the <see cref="F:IronPdf.HtmlHeaderFooter.HtmlFragment">HtmlFragment</see> will be relative to.
            This includes 'src' attributes on images, scripts, style-sheets and also hrefs on hyper-links.
            <para>Note: A base URL that points to a directory should end with a slash.  </para>
            <para>Base URL accepts file paths as well as URLS. If no BaseUrl is given, the HtmlHeaderFooter BaseUrl will be inherited from the main HTML document where possible.</para>
            </summary>
        </member>
        <member name="F:IronPdf.HtmlHeaderFooter.LoadStylesAndCSSFromMainHtmlDocument">
            <summary>
            Loads style code blocks and links to CSS style sheets from the main HTML document (which provides the PDF content) into the <see cref="T:IronPdf.HtmlHeaderFooter"/> .
            <para>By default, Html Headers and Footers are stand-alone HTML documents with their own default styles.  Setting <see cref="F:IronPdf.HtmlHeaderFooter.LoadStylesAndCSSFromMainHtmlDocument"/> to <c>true</c> will attempt to load all STYLE and LINK tags from the main HTML document (which renders teh PDF) into the <see cref="T:IronPdf.HtmlHeaderFooter"/>.</para>
            <para>If your main HTML document contains complex CSS frameworks,  styles the HEAD or BODY element heavily or loads CSS from javascript then this method may not work as intended.</para>
            <para>This feature is not available for <see cref="M:IronPdf.HtmlToPdf.RenderUrlAsPdf(System.String)"/> and other RenderUrlAsPdf methods.  It works for HTMLToPdf and HtmlFileToPdf conversions only. </para>
            <para>It is often preferable to load style sheets explicitly into your HTML Headers and Footers as STYLE and LINK tags within the <see cref="F:IronPdf.HtmlHeaderFooter.HtmlFragment"/> for granular control</para>
            </summary>
        </member>
        <member name="T:IronPdf.PDFHeaderFooter">
            <exclude />
        </member>
        <member name="T:IronPdf.SimpleHeaderFooter">
            <summary>
            Defines PDF Header and Footer display options.
            </summary>
        </member>
        <member name="M:IronPdf.SimpleHeaderFooter.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>System.Object of type SimpleHeaderFooter</returns>
        </member>
        <member name="F:IronPdf.SimpleHeaderFooter.LeftText">
            <summary>
            Sets the left hand side header text for the PDF document.
            <para> Merge meta-data into your header using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title}</para>
            </summary>
        </member>
        <member name="F:IronPdf.SimpleHeaderFooter.CenterText">
            <summary>
            Sets the centered header text for the PDF document.
            <para> Merge meta-data into your header using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title}</para>
            </summary>
        </member>
        <member name="F:IronPdf.SimpleHeaderFooter.RightText">
            <summary>
            Sets the right hand side header text for the PDF document.
            <para> Merge meta-data into your header using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title}</para>
            </summary>
        </member>
        <member name="F:IronPdf.SimpleHeaderFooter.FontFamily">
            <summary>
             Font used to render the PDF header.
            </summary>
        </member>
        <member name="F:IronPdf.SimpleHeaderFooter.FontSize">
            <summary>
             Font size in px.
            </summary>
        </member>
        <member name="F:IronPdf.SimpleHeaderFooter.DrawDividerLine">
            <summary>
            Adds a horizontal line divider between the header / footer and the page content on every page of the PDF document.
            </summary>
        </member>
        <member name="F:IronPdf.SimpleHeaderFooter.Spacing">
            <summary>
            Space between the header and page content in millimeters.
            </summary>
        </member>
        <member name="T:IronPdf.HttpLoginCredentials">
                         <summary>   Provides credentials for IronPdf to log-in to an intranet, extranet or website, impersonating a user.  
                         This allows a unique ability to render web-pages as PDFs even on secure intranets, extranets and websites.            
                         </summary>
            
             
        </member>
        <member name="F:IronPdf.HttpLoginCredentials.NetworkUsername">
            <summary>
            Optional: User-name credential for Windows / Linux network security authentication.
            </summary>
        </member>
        <member name="F:IronPdf.HttpLoginCredentials.NetworkPassword">
            <summary>
            Optional: Password credential for Windows / Linux network security authentication.
            </summary>
        </member>
        <member name="P:IronPdf.HttpLoginCredentials.UserAgent">
            <summary>
            The Http User-Agent header which will be used to fetch any remote HTML.
            </summary>
        </member>
        <member name="F:IronPdf.HttpLoginCredentials.LoginFormUrl">
            <summary>
             Optional:  Gives the URL to post website login-form authentication.  Should be the absolute Url which the form's action attribute specifies.
            </summary>
        </member>
        <member name="F:IronPdf.HttpLoginCredentials.LoginFormPostVariables">
            <summary>
             Optional:  Specifies a collection of HTTP form variables to post/submit to <see cref="F:IronPdf.HttpLoginCredentials.LoginFormUrl"/>.  
            </summary>
        </member>
        <member name="F:IronPdf.HttpLoginCredentials.CustomPostVariables">
            <summary>
             Optional:  Specifies a collection of HTTP 'POST' variables to submit on every PDF rendering request.  
             <para>Note: The 'key' is the name of the post field, The 'value' is its value.  UrlEncoding is not required.</para>
             <para>Note: Not implemented in .Net Core.</para>
            </summary>
        </member>
        <member name="F:IronPdf.HttpLoginCredentials.CustomPostFiles">
            <summary>
             Optional, Advanced Usage:  Specifies a collection files to summited on every PDF rendering request.  Allows images and documents to be submitted to forms such that the output will be rendered as an PDF.
              <para>Note: The Key is the name of the post field, The value is the full file path.. UrlEncoding is not required.</para>
            </summary>
        </member>
        <member name="F:IronPdf.HttpLoginCredentials.CustomCookies">
            <summary>
            A Dictionary which allows custom cookies to be posted with every login request, and HTTP request made by RenderUriToHml methods.
            </summary>
        </member>
        <member name="F:IronPdf.HttpLoginCredentials.EnableCookies">
            <summary>
            Enables cookies to be stored and sent when using RenderUriToHml methods.
            </summary>
        </member>
        <member name="F:IronPdf.HttpLoginCredentials.Proxy">
            <summary>e
            Specifies an Http proxy server.   Use the pattern: http(s)://user-name:password@host:port/
            </summary>
        </member>
        <member name="F:IronPdf.HttpLoginCredentials.CustomHttpHeaders">
            <summary>
            A dictionary of custom HTTP headers to be sent with every HTTP Request
            </summary>
        </member>
        <member name="M:IronPdf.HttpLoginCredentials.Finalize">
            <summary>
            Destructor cleans up all temporary cookies files for the  HttpLoginCredentials instance.
            </summary>
        </member>
        <member name="T:IronPdf.ImageToPdfConverter">
            <summary>
             The ImageToPdfConveter class can be used to create PDF documents from images.  It accepts both image files and <see cref="T:System.Drawing.Image" /> objects as input.
             <para> The ImageToPdf static methods create simple PDF documents containing each image as one page of the created PDF.</para>
             <para> To rasterize PDF documents as images (the reverse operation), see <see cref="M:IronPdf.PdfDocument.ToBitmap(System.Int32)"/> and <see cref="M:IronPdf.PdfDocument.RasterizeToImageFiles(System.String,IronPdf.ImageType,System.Int32)"/></para>
            </summary>
        </member>
        <member name="M:IronPdf.ImageToPdfConverter.ImageToPdf(System.String)">
            <summary>
            Converts a single image file to an identical PDF document of matching dimensions. 
            </summary>
            <param name="ImageFileName">File path of the image file.</param>
            <returns>
            Returns a <see cref="T:IronPdf.PdfDocument" /> document which can then be edited, saved or served over the web.
            </returns>
        </member>
        <member name="M:IronPdf.ImageToPdfConverter.ImageToPdf(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts multiple image files to a PDF document.  Each image creates 1 page which matches the image dimensions.
            </summary>
            <param name="ImageFileNames">The image file path names.</param>
            <returns>
            Returns a <see cref="T:IronPdf.PdfDocument" /> document which can then be edited, saved or served over the web.
            </returns>
        </member>
        <member name="M:IronPdf.ImageToPdfConverter.ImageToPdf(System.Drawing.Image)">
            <summary>
            Converts a single <see cref="T:System.Drawing.Image" /> object or Bitmap to a PDF document of matching dimensions.
            </summary>
            <param name="Image">The image object.   Requires a project reference to the System.Drawing Assembly.</param>
            <returns>
            Returns a <see cref="T:IronPdf.PdfDocument" /> document which can then be edited, saved or served over the web.
            </returns>
        </member>
        <member name="M:IronPdf.ImageToPdfConverter.ImageToPdf(System.Collections.Generic.IEnumerable{System.Drawing.Image})">
            <summary>
            Converts multiple  <see cref="T:System.Drawing.Image" /> objects or Bitmaps  into a PDF document.  Each image creates 1 page which matches the image dimensions.
            </summary>
            <param name="Images">The image objects.   Requires a project reference to the System.Drawing Assembly.</param>
            <returns>
            Returns a <see cref="T:IronPdf.PdfDocument" /> document which can then be edited, saved or served over the web.
            </returns>
        </member>
        <member name="T:IronPdf.PdfDocument">
            <summary>
            A PDF Document
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument._BookMarks">
            <summary>
            An PdfOutline object allowing developers to add, edit  and remove navigational bookmarks from PDF documents.
            </summary>
        </member>
        <member name="M:IronPdf.PdfDocument.AddTextAnnotation(IronPdf.PdfDocument.TextAnnotation,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an annotation to a page of this <see cref="T:IronPdf.PdfDocument"/>
            </summary>
            <param name="TextAnnotation">The annotation as a <see cref="T:IronPdf.PdfDocument.TextAnnotation"/> object.</param>
            <param name="PageIndex">Index of the page to add the annotation. The first page has a PageIndex of 0</param>
            <param name="X">The horizontal X position of the annotation on your page in pixels</param>
            <param name="Y">The vertical Y position of the annotation on your page in pixels.  Measured from top downwards.</param>
            <param name="Width">The width of your annotation's icon and interactive area in pixels</param>
            <param name="Height">The height of your annotation's icon and interactive area in pixels</param>
        </member>
        <member name="M:IronPdf.PdfDocument.AddTextAnnotation(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,IronPdf.PdfDocument.TextAnnotation.AnnotationIcon,System.Boolean,System.Boolean,System.Boolean,System.String,System.Double)">
            <summary>
            Adds an annotation to a page of this <see cref="T:IronPdf.PdfDocument" />
            </summary>
            <param name="Title">The title of the annotation</param>
            <param name="Subject">The subject or 'subheading' of the annotation</param>
            <param name="Contents">The text content of the annotation</param>
            <param name="PageIndex">Index of the page to add the annotation. The first page has a PageIndex of 0</param>
            <param name="X">The horizontal X position of the annotation on your page in pixels</param>
            <param name="Y">The vertical Y position of the annotation on your page in pixels.  Measured from top downwards.</param>
            <param name="Width">The width of your annotation's icon and interactive area in pixels</param>
            <param name="Height">The height of your annotation's icon and interactive area in pixels</param>
            <param name="Icon">The icon used to display the interactive annotation within the PDF</param>
            <param name="Open">Sets the annotation to be opened and readable by default, without user interaction</param>
            <param name="ReadOnly">Makes the annotation non user editable</param>
            <param name="Printable">Makes the annotation render during user PDF printing operations</param>
            <param name="RgbColor">Color of the annotation's background 'sticky note' using Html color notation.  E.g. '#FFFF33'.</param>
            <param name="Opacity">The opacity of the annotation (valid values are from 0.0 to 1.0)</param>
        </member>
        <member name="T:IronPdf.PdfDocument.TextAnnotation">
            <summary>
            Defines a Sticky-Note style PDF annotation.
            <seealso cref="M:IronPdf.PdfDocument.AddTextAnnotation(IronPdf.PdfDocument.TextAnnotation,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="T:IronPdf.PdfDocument.TextAnnotation.AnnotationIcon">
            <summary>
            Icons used to interact with (open/close) the annotation with the PDF page.
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.AnnotationIcon.NoIcon">
            <summary>
            No icon, this is useful when an annotation will be signified by an existing graphic or object.
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.AnnotationIcon.Comment">
            <summary>
            A Comment Icon
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.AnnotationIcon.Help">
            <summary>
            A Help Icon
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.AnnotationIcon.Insert">
            <summary>
            An 'Insert' Icon
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.AnnotationIcon.Key">
            <summary>
            A Key Icon
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.AnnotationIcon.NewParagraph">
            <summary>
            A New Paragraph Icon
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.AnnotationIcon.Note">
            <summary>
            A Note Icon
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.AnnotationIcon.Paragraph">
            <summary>
            A 'Paragraph of Text' Icon
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.Title">
            <summary>
            The main title of the annotation as displayed in the header of the 'sticky note'
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.Subject">
            <summary>
            The sub title of the annotation as displayed in the header of the 'sticky note'
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.Contents">
            <summary>
            The contents of the 'sticky note' annotation
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.Icon">
            <summary>
            An icon to visually represent the 'sticky note' annotation
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.Opacity">
            <summary>
              The opacity of the annotation (valid values are from 0.0 to 1.0) 
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.OpenByDefault">
            <summary>
            Sets the annotation to be opened and readable by default, without user interaction
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.Hidden">
            <summary>
            Hides the annotation from users
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.Rotateable">
            <summary>
            Allows the annotation to be rotated.  E.g.  when the containing page os rotated 
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.Printable">
            <summary>
            Allows the annotation to be printed when users print the PDF
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.ReadOnly">
            <summary>
            Allows the annotation to be printed when users print the PDF
            </summary>
        </member>
        <member name="M:IronPdf.PdfDocument.TextAnnotation.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this annotation.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="F:IronPdf.PdfDocument.TextAnnotation.Color">
            <summary>
            The color of the annotation's 'Sticky Note'
            </summary>
        </member>
        <member name="P:IronPdf.PdfDocument.Form">
            <summary>
            Gets an object returning any PDF editable form fields which can have their values both read and set programmatically.
            </summary>
            <value>
            The form.
            </value>
        </member>
        <member name="M:IronPdf.PdfDocument.Flatten">
            <summary>  
            Flattens a document (make the fields non-editable).  
            </summary>
        </member>
        <member name="M:IronPdf.PdfDocument.AddHeaders(IronPdf.SimpleHeaderFooter,System.Boolean,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Renders page headers to an existing PDF File
            <para>Margin spacing on the PDF page for the header are set to default values of 25mm. An overload method allow header margins to be chosen specifically or set to zero.</para>
            </summary>
            <param name="Header">An new instance of IronPdf.SimpleHeaderFooter that defines the header content and layout.</param>
            <param name="SkipFirstPage">if set to <c>true</c>, the first (cover) page is not counted or stamped with a header.</param>
            <param name="PageIndexesToAddHeadersTo">Optional.  The PageIndexes (zero-based page numbers) to which the header will be added.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddHeaders(IronPdf.SimpleHeaderFooter,System.Double,System.Double,System.Double,System.Boolean,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Renders page headers to an existing PDF File
            </summary>
            <param name="Header">An new instance of IronPdf.SimpleHeaderFooter that defines the header content and layout.</param>
            <param name="MarginLeft">The left margin of the header on the page in mm.</param>
            <param name="MarginRight">The right margin of the header on the page in mm.</param>
            <param name="MarginTop">The top margin of the header on the page in mm.</param>
            <param name="SkipFirstPage">if set to <c>true</c>, the first (cover) page is not counted or stamped with a header.</param>
            <param name="PageIndexesToAddHeadersTo">Optional.  The PageIndexes (zero-based page numbers) to which the header will be added.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddFooters(IronPdf.SimpleHeaderFooter,System.Double,System.Double,System.Double,System.Boolean,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Renders page footers to an existing PDF File
            </summary>
            <param name="Footer">An new instance of IronPdf.SimpleHeaderFooter that defines the footer content and layout.</param>
            <param name="MarginLeft">The left margin of the footer on the page in mm.</param>
            <param name="MarginRight">The right margin of the footer on the page in mm.</param>
            <param name="MarginBottom">The bottom margin of the footer on the page in mm.</param>
            <param name="SkipFirstPage">if set to <c>true</c>, the first (cover) page is not counted or stamped with a footer.</param>
            <param name="PageIndexesToAddFootersTo">Optional.  The PageIndexes (zero-based page numbers) to which the footer will be added.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddFooters(IronPdf.SimpleHeaderFooter,System.Boolean,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Renders page footers to an existing PDF File
            <para>Margin spacing on the PDF page for the footer are set to default values of 25mm. An overload method allow footer margins to be chosen specifically or set to zero.</para>
            </summary>
            <param name="Footer">An new instance of IronPdf.SimpleHeaderFooter that defines the footer content and layout.</param>
            <param name="SkipFirstPage">if set to <c>true</c>, the first (cover) page is not counted or stamped with a footer.</param>
            <param name="PageIndexesToAddFootersTo">Optional.  The PageIndexes (zero-based page numbers) to which the footer will be added.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddHTMLHeaders(IronPdf.HtmlHeaderFooter,System.Boolean,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Renders HTML page headers to an existing PDF File
            <para>Margin spacing on the PDF page for the header are set to default values of 25mm. An overload method allow header margins to be chosen specifically or set to zero.</para>
            </summary>
            <param name="Header">An new instance of IronPdf.HtmlHeaderFooter that defines the header content and layout.</param>
            <param name="SkipFirstPage">if set to <c>true</c>, the first (cover) page is not counted or stamped with a header.</param>
            <param name="PageIndexesToAddHeadersTo">Optional.  The PageIndexes (zero-based page numbers) to which the header will be added.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddHTMLHeaders(IronPdf.HtmlHeaderFooter,System.Double,System.Double,System.Double,System.Boolean,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Renders HTML page headers to an existing PDF File
            </summary>
            <param name="Header">An new instance of IronPdf.HtmlHeaderFooter that defines the header content and layout.</param>
            <param name="MarginLeft">The left margin of the header on the page in mm.</param>
            <param name="MarginRight">The right margin of the header on the page in mm.</param>
            <param name="MarginTop">The top margin of the header on the page in mm.</param>
            <param name="SkipFirstPage">if set to <c>true</c>, the first (cover) page is not counted or stamped with a header.</param>
            <param name="PageIndexesToAddHeadersTo">Optional.  The PageIndexes (zero-based page numbers) to which the header will be added.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddHTMLFooters(IronPdf.HtmlHeaderFooter,System.Boolean,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Renders HTML page footers to an existing PDF File
             <para>Margin spacing on the PDF page for the footer are set to default values of 25mm. An overload method allow footer margins to be chosen specifically or set to zero.</para>
            </summary>
            <param name="Footer">An new instance of IronPdf.HtmlHeaderFooter that defines the footer content and layout.</param>
            <param name="SkipFirstPage">if set to <c>true</c>, the first (cover) page is not counted or stamped with a footer.</param>
            <param name="PageIndexesToAddFootersTo">Optional.  The PageIndexes (zero-based page numbers) to which the footer will be added.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddHTMLFooters(IronPdf.HtmlHeaderFooter,System.Double,System.Double,System.Double,System.Boolean,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Renders HTML page footers to an existing PDF File
            </summary>
            <param name="Footer">An new instance of IronPdf.HtmlHeaderFooter that defines the footer content and layout.</param>
            <param name="MarginLeft">The left margin of the footer on the page in mm.</param>
            <param name="MarginRight">The right margin of the footer on the page in mm.</param>
            <param name="MarginBottom">The bottom margin of the footer on the page in mm.</param>
            <param name="SkipFirstPage">if set to <c>true</c>, the first (cover) page is not counted or stamped with a footer.</param>
            <param name="PageIndexesToAddFootersTo">Optional.  The PageIndexes (zero-based page numbers) to which the footer will be added.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddBackgroundPdf(System.String,System.Int32)">
            <summary>
            Adds a background to each page of this PDF. The background is copied from a page in another PDF document.
            </summary>
            <param name="BackgroundPdfPath">The background PDF's file path.</param>
            <param name="BackgroundPdfPageIndex">Index (zero-based page number) to copy from the BackgroundPdf.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddBackgroundPdfToPage(System.Int32,System.String,System.Int32)">
            <summary>
            Adds the background to one page of this PDF.  The background is copied from a page in another PDF document.
            </summary>
            <param name="ToPageIndex">Index (zero-based page number) of the page of this PDF to which the background will be applied to.</param>
            <param name="BackgroundPdfPath">The background PDF path.</param>
            <param name="BackgroundPdfPageIndex">Index (zero-based page number) to copy from the BackgroundPdf.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddBackgroundPdfToPageRange(System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Int32)">
            <summary>
            Adds the background to specified pages of this PDF.  The background is copied from a page in another PDF document.
            </summary>
            <param name="ToPageIndexes">A list of Indexes (zero-based page numbers) of pages in this PDF to which the background will be applied to.</param>
            <param name="BackgroundPdfPath">The background PDF path.</param>
            <param name="BackgroundPdfPageIndex">Index (zero-based page number) to copy from the BackgroundPdf.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddBackgroundPdfToPageRange(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Adds the background to a range of pages in this PDF.  The background is copied from a page in another PDF document.
            </summary>
            <param name="StartPageIndex">First index  (zero-based page number) to start adding backgrounds to .</param>
            <param name="EndPageIndex">Last index  (zero-based page number) to end adding backgrounds to.</param>
            <param name="BackgroundPdfPath">The background PDF path.</param>
            <param name="BackgroundPdfPageIndex">Index (zero-based page number) to copy from the BackgroundPdf.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddBackgroundPdf(IronPdf.PdfDocument,System.Int32)">
            <summary>
            Adds a background to each page of this PDF. The background is copied from a page in another PDF document.
            </summary>
            <param name="BackgroundPdf">The Background PDF as a <see cref="T:IronPdf.PdfDocument"/>.</param>
            <param name="BackgroundPdfPageIndex">Index (zero-based page number) to copy from the BackgroundPdf.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddBackgroundPdfToPage(System.Int32,IronPdf.PdfDocument,System.Int32)">
            <summary>
            Adds the background to one page of this PDF.  The background is copied from a page in another PDF document.
            </summary>
            <param name="ToPageIndex">Index (zero-based page number) of the page of this PDF to which the background will be applied to.</param>
            <param name="BackgroundPdf">The Background PDF as a <see cref="T:IronPdf.PdfDocument"/>.</param>
            <param name="BackgroundPdfPageIndex">Index (zero-based page number) to copy from the BackgroundPdf.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddBackgroundPdfToPageRange(System.Int32,System.Int32,IronPdf.PdfDocument,System.Int32)">
            <summary>
            Adds the background to a range of pages in this PDF.  The background is copied from a page in another PDF document.
            </summary>
            <param name="StartPageIndex">First index  (zero-based page number) to start adding backgrounds to .</param>
            <param name="EndPageIndex">Last index  (zero-based page number) to end adding backgrounds to.</param>
            <param name="BackgroundPdf">The Background PDF as a <see cref="T:IronPdf.PdfDocument"/>.</param>
            <param name="BackgroundPdfPageIndex">Index (zero-based page number) to copy from the BackgroundPdf.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddBackgroundPdfToPageRange(System.Collections.Generic.IEnumerable{System.Int32},IronPdf.PdfDocument,System.Int32)">
            <summary>
            Adds the background to specified pages of this PDF.  The background is copied from a page in another PDF document.
            </summary>
            <param name="ToPageIndexes">A list of Indexes (zero-based page numbers) of pages in this PDF to which the background will be applied to.</param>
            <param name="BackgroundPdf">The Background PDF as a <see cref="T:IronPdf.PdfDocument"/>.</param>
            <param name="BackgroundPdfPageIndex">Index (zero-based page number) to copy from the BackgroundPdf.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddForegroundOverlayPdf(System.String,System.Int32)">
            <summary>
            Adds an overlay to each page of this PDF. The foreground overlay is copied from a page in another PDF document.
            </summary>
            <param name="OverlayPdfPath">The background PDF's file path.</param>
            <param name="OverlayPdfPageIndex">Index (zero-based page number) to copy from the Overlay PDF.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddForegroundOverlayPdfToPage(System.Int32,System.String,System.Int32)">
            <summary>
            Adds an overlay to one page of this PDF. The foreground overlay is copied from a page in another PDF document.
            </summary>
            <param name="ToPageIndex">Index (zero-based page number) of the page of this PDF to which the foreground will be applied to.</param>
            <param name="OverlayPdfPath">The overlay PDF path.</param>
            <param name="OverlayPdfPageIndex">Index (zero-based page number) to copy from the Overlay PDF.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddForegroundOverlayPdfToPageRange(System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Int32)">
            <summary>
            Adds an overlay to a range page of this PDF. The foreground overlay is copied from a page in another PDF document.
            </summary>
            <param name="ToPageIndexes">A list of Indexes (zero-based page numbers) of pages in this PDF to which the overlay will be applied to.</param>
            <param name="OverlayPdfPath">The overlay PDF path.</param>
            <param name="OverlayPdfPageIndex">Index (zero-based page number) to copy from the Overlay PDF.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddForegroundOverlayPdfToPageRange(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Adds an overlay to a range page of this PDF. The foreground overlay is copied from a page in another PDF document.
            </summary>
            <param name="StartPageIndex">First index  (zero-based page number) to start adding overlays to .</param>
            <param name="EndPageIndex">Last index  (zero-based page number) to end adding overlays to.</param>
            <param name="OverlayPdfPath">The overlay PDF path.</param>
            <param name="OverlayPdfPageIndex">Index (zero-based page number) to copy from the Overlay PDF.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddForegroundOverlayPdf(IronPdf.PdfDocument,System.Int32)">
            <summary>
            Adds an overlay to each page of this PDF. The foreground overlay is copied from a page in another PDF document.
            </summary>
            <param name="OverlayPdf">The overlay PDF as a <see cref="T:IronPdf.PdfDocument"/>.</param>
            <param name="OverlayPdfPageIndex">Index (zero-based page number) to copy from the Overlay PDF.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddForegroundOverlayPdfToPage(System.Int32,IronPdf.PdfDocument,System.Int32)">
            <summary>
            Adds an overlay to one page of this PDF. The foreground overlay is copied from a page in another PDF document.
            </summary>
            <param name="ToPageIndex">Index (zero-based page number) of the page of this PDF to which the foreground will be applied to.</param>
            <param name="OverlayPdf">The overlay PDF as a <see cref="T:IronPdf.PdfDocument"/>.</param>
            <param name="OverlayPdfPageIndex">Index (zero-based page number) to copy from the Overlay PDF.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddForegroundOverlayPdfToPageRange(System.Int32,System.Int32,IronPdf.PdfDocument,System.Int32)">
            <summary>
            Adds an overlay to a range page of this PDF. The foreground overlay is copied from a page in another PDF document.
            </summary>
            <param name="StartPageIndex">First index  (zero-based page number) to start adding overlays to .</param>
            <param name="EndPageIndex">Last index  (zero-based page number) to end adding overlays to.</param>
            <param name="OverlayPdf">The overlay PDF as a <see cref="T:IronPdf.PdfDocument"/>.</param>
            <param name="OverlayPdfPageIndex">Index (zero-based page number) to copy from the Overlay PDF.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AddForegroundOverlayPdfToPageRange(System.Collections.Generic.IEnumerable{System.Int32},IronPdf.PdfDocument,System.Int32)">
            <summary>
            Adds an overlay to a range page of this PDF. The foreground overlay is copied from a page in another PDF document.
            </summary>
            <param name="ToPageIndexes">A list of Indexes (zero-based page numbers) of pages in this PDF to which the overlay will be applied to.</param>
            <param name="OverlayPdf">The overlay PDF as a <see cref="T:IronPdf.PdfDocument"/>.</param>
            <param name="OverlayPdfPageIndex">Index (zero-based page number) to copy from the Overlay PDF.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.GetPageRotation(System.Int32)">
            <summary>
            Gets the rotation of a PDF page in degrees.
            </summary>
            <param name="PageIndex">Index of the page to inspect. PageIndex is a 'Zero based' page number, the first page being 0.</param>
            <returns>A number of degrees rotation</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.RotateAllPages(System.Int32)">
            <summary>
            Rotates all pages of the PdfDocument by a specified number of degrees.
            </summary>
            <param name="Degrees">The number of degrees to rotate the pages.  0, 90, 180 or 270 are accepted values.</param>
        </member>
        <member name="M:IronPdf.PdfDocument.RotatePage(System.Int32,System.Int32)">
            <summary>
            Rotates one page of the PdfDocument by a specified number of degrees.
            </summary>
            <param name="PageIndex">Index of the page to rotate. PageIndex is a 'Zero based' page number, the first page being 0.</param>
            <param name="Degrees">The number of degrees to rotate the pages.  0, 90, 180 or 270 are accepted values.</param>
        </member>
        <member name="M:IronPdf.PdfDocument.RotateSelectedPages(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Rotates selected pages of the PdfDocument by a specified number of degrees.
            </summary>
            <param name="PageIndexes">Indexes of the pages to rotate in an IEnumerable, list or array. PageIndex is a 'Zero based' page number, the first page being 0.</param>
            <param name="Degrees">The number of degrees to rotate the pages.  0, 90, 180 or 270 are accepted values.</param>
        </member>
        <member name="M:IronPdf.PdfDocument.QuickSignPdfWithDigitalSignatureFile(System.String,System.String)">
            <summary>
            Sign PDF with digital signature certificate.  For more advanced Options please see <see cref="M:IronPdf.PdfDocument.QuickSignPdfWithDigitalSignatureFile(System.String,System.String)"/>
                  <para> Note that the PDF will not be fully signed until Saved using <see cref="M:IronPdf.PdfDocument.SaveAs(System.String)"></see>,  <see cref="M:IronPdf.PdfDocument.TrySaveAs(System.String)"></see>,  <see cref="P:IronPdf.PdfDocument.Stream"></see> or  <see cref="P:IronPdf.PdfDocument.BinaryData"></see>.  Multiple certificates may be used.</para>
                  <para>Not implemented in .Net Core</para>
            </summary>
            <seealso cref="T:IronPdf.PdfSignature"/>
            <param name="CertificateFilePath">The file path to a .pfx or .p12 digital signing certificate which may be generated using Adobe Acrobat Viewer.</param>
            <param name="Password">The certificate password as a String.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.SignPdfWithDigitalSignature(IronPdf.PdfSignature)">
            <summary>
            Signs the PDF with digital signature with advanced options. 
            <para> Note that the PDF will not be fully signed until Saved using <see cref="M:IronPdf.PdfDocument.SaveAs(System.String)"></see>,  <see cref="M:IronPdf.PdfDocument.TrySaveAs(System.String)"></see>,  <see cref="P:IronPdf.PdfDocument.Stream"></see> or  <see cref="P:IronPdf.PdfDocument.BinaryData"></see>.  Multiple certificates may be used.</para>
                  <para>Not implemented in .Net Core</para>
            </summary>
            <param name="Signature">The PdfSignature.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.StampHTML(IronPdf.HtmlStamp,System.Int32)">
            <summary>
            Edits the PDF by adding rendered HTML either behind or in-front of the existing contents of one page.
            </summary>
            <param name="Stamp">The <see cref="T:IronPdf.HtmlStamp"/> stamp. </param>
            <param name="PageIndexToStamp">The page index (zero-based page number) to stamp.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.StampHTML(IronPdf.HtmlStamp)">
            <summary>
            Edits the PDF by adding rendered HTML either behind or in-front of the existing contents of every page.
            </summary>
            <param name="Stamp">The <see cref="T:IronPdf.HtmlStamp"/> stamp. </param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.StampHTML(IronPdf.HtmlStamp,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Edits the PDF by adding rendered HTML either behind or in-front of the existing contents of specified pages.
            </summary>
            <param name="Stamp">The <see cref="T:IronPdf.HtmlStamp"/> stamp. </param>
            <param name="PageIndexesToStamp">The list page indexes (zero-based page number) to stamp.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="P:IronPdf.PdfDocument.Password">
            <summary>
             Sets a Password used to protect and encrypt the PDF File.
             Setting a password will cause IronPDF to automatically protect the PDF file content using strong 128 bit encryption.
             Setting the password to null will remove any existing password.
            </summary>
        </member>
        <member name="P:IronPdf.PdfDocument.OwnerPassword">
            <summary>
            Sets the owner password and enables 128Bit encryption of PDF content. An owner password is one used to enable and disable all other security settings.
            <para>OwnerPassword must be set to a non empty string value for
            <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserCopyPasteContent"/>,
            <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserAnnotations"/>,
            <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserFormData"/>,
            <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserPrinting"/> and
            <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserEdits"/> to be restricted. </para>
            </summary>
        </member>
        <member name="M:IronPdf.PdfDocument.FromFile(System.String,System.String,System.String)">
            <summary>
            Opens an existing PDF document for editing.
            </summary>
            <param name="PdfFilePath">The PDF file path.</param>
            <param name="password">Optional user password if the PDF document is encrypted.</param>
            <param name="ownerPassword">Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..).</param>
            <exception cref="T:System.IO.IOException">Exception thrown if can not be opened.</exception>
            <returns>An IronPdf.PdfDocument object as loaded from the file path.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.#ctor(System.String,System.String,System.String)">
            <summary>
            Opens an existing PDF document for editing.
            </summary>
            <param name="PdfFilePath">The PDF file path.</param>
            <param name="password">Optional user password if the PDF document is encrypted.</param>
            <param name="ownerPassword">Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..).</param>
            <exception cref="T:System.IO.IOException">Exception thrown if can not be opened.</exception>
        </member>
        <member name="M:IronPdf.PdfDocument.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
            Opens an existing PDF document for editing.
            </summary>
            <param name="PdfDataStream">The PDF file data as a Stream.</param>
            <param name="password">Optional user password if the PDF document is encrypted.</param>
            <param name="ownerPassword">Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..).</param>
            <exception cref="T:System.IO.IOException">Exception thrown if can not be opened.</exception>
        </member>
        <member name="M:IronPdf.PdfDocument.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            Opens an existing PDF document for editing.
            </summary>
            <param name="PdfData">The PDF file data as byte array.</param>
            <param name="password">Optional user password if the PDF document is encrypted.</param>
            <param name="ownerPassword">Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..).</param>
            <exception cref="T:System.IO.IOException">Exception thrown if can not be opened.</exception>
        </member>
        <member name="P:IronPdf.PdfDocument.Stream">
            <summary>
             Gets the binary data for the full PDF file as a Stream
            </summary>
            <value>
            The PDF file as a MemoryStream
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.BinaryData">
            <summary>
            Gets the binary data for the full PDF file as a byte array;
            </summary>
            <value>
            The PDF file as a byte array.
            </value>
        </member>
        <member name="M:IronPdf.PdfDocument.SaveAs(System.String)">
            <summary>
            Saves the PdfDocument to a file.
            <para>Supports site relative paths staring with "~/" in .Net Framework Web 4+ Applications</para>
            </summary>
            <param name="FileName">File Path</param>
            <returns>This PdfDocument for fluid code notation. </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.TrySaveAs(System.String)">
            <summary>
            Attempt to save the PdfDocument to a file.
            </summary>
            <param name="FileName">File Path</param>
            <returns>}<c>true</c> if the file was saved successfully.  <c>false</c> if an error occurred (e.g. file was locked or insufficient permissions). </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.CopyPage(System.Int32)">
            <summary>
            Creates a new PDF by copying a page from this PdfDocument.
            </summary>
            <param name="PageIndex">Index of the page.  Note: Page 1 has index 0...</param>
            <returns>This PdfDocument for a LINQ like 'fluent' coding style.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.CopyPages(System.Int32,System.Int32)">
            <summary>
            Creates a new PDF by copying a range of pages from this <see cref="T:IronPdf.PdfDocument"/>.
            </summary>
            <param name="StartIndex">The index of the first PDF page to copy.. Note: Page 1 has index 0 </param>
            <param name="EndIndex">The index of the last PDF page to copy.></param>
            <returns>This PdfDocument for a LINQ like 'fluent' coding style.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.CopyPages(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a new PDF by copying a range of pages from this PdfDocument.
            </summary>
            <param name="PageIndexes">An IEnumerable of page indexes to copy into the new PDF. </param>
            <returns>This PdfDocument for a LINQ like 'fluent' coding style.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractAllBitmaps">
            <summary>
            Finds all embedded Images from within the PDF and returns then as System.Drawing.Bitmap objects
            </summary>
            <returns>IEnumerable of Bitmap.  The extracted images as System.Drawing Objects</returns>
            
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractBitmapsFromPage(System.Int32)">
            <summary>
            Finds all embedded Images from within one page of the PDF and returns them as System.Drawing.Bitmap objects
            </summary>
            <param name="PageIndex">Index of the page.  Note: Page 1 has index 0...</param>
            <returns>IEnumerable of Bitmap.  The extracted images as System.Drawing Objects</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractBitmapsFromPages(System.Int32,System.Int32)">
            <summary>
            Finds all embedded Images from within a range of pages in the PDF and returns them as System.Drawing.Bitmap objects
            </summary>
            <param name="StartIndex">The index of the first PDF page  to extract images from.. Note: Page 1 has index 0 </param>
            <param name="EndIndex">The index of the last PDF page to extract images from.</param>
            <returns>IEnumerable of Bitmap.  The extracted images as System.Drawing Objects</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractBitmapsFromPages(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Finds all embedded Images from within a specified  pages in the PDF and returns them as System.Drawing.Bitmap objects
            </summary>
            <param name="PageIndexes">An IEnumerable list of page indexes. </param>
            <returns>IEnumerable of Bitmap.  The extracted images as System.Drawing Objects</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractAllImages">
            <summary>
            Finds all embedded Images from within the PDF and returns then as System.Drawing.Image objects
            </summary>
            <returns>IEnumerable of Image.  The extracted images as System.Drawing Objects</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractAllRawImages">
            <summary>
            Extracts all images from a PDf document.
            Images are Returned as their raw data in as Byte Arrays (byte[])
            </summary>
            <returns>An Enumerable of Byte Arrays.  Each Byte Array represents one image.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractImagesFromPage(System.Int32)">
            <summary>
            Finds all embedded Images from within one page of the PDF and returns them as System.Drawing.Image objects
            </summary>
            <param name="PageIndex">Index of the page.  Note: Page 1 has index 0...</param>
            <returns>IEnumerable of Image.  The extracted images as System.Drawing Objects</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractRawImagesFromPage(System.Int32)">
            <summary>
            Finds all embedded Images from within one page of the PDF and returns them as raw image byte array objects
            </summary>
            <param name="PageIndex">Index of the page.  Note: Page 1 has index 0...</param>
            <returns>IEnumerable of raw image byte array.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractRawImagesFromPages(System.Int32,System.Int32)">
            <summary>
            Finds all embedded Images from within a range of pages in the PDF and returns them as raw image byte array objects
            </summary>
            <param name="StartIndex">The index of the first PDF page  to extract images from.. Note: Page 1 has index 0 </param>
            <param name="EndIndex">The index of the last PDF page to extract images from.</param>
            <returns>IEnumerable of raw image byte array.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractImagesFromPages(System.Int32,System.Int32)">
            <summary>
            Finds all embedded Images from within a range of pages in the PDF and returns them as System.Drawing.Bitmap objects
            </summary>
            <param name="StartIndex">The index of the first PDF page  to extract images from.. Note: Page 1 has index 0 </param>
            <param name="EndIndex">The index of the last PDF page to extract images from.</param>
            <returns>IEnumerable of Image.  The extracted images as System.Drawing Objects</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractImagesFromPages(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Finds all embedded Images from within a specified  pages in the PDF and returns them as System.Drawing.Image objects
            </summary>
            <param name="PageIndexes">An IEnumerable list of page indexes. </param>
            <returns>IEnumerable of Image.  The extracted images as System.Drawing Objects</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractRawImagesFromPages(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Finds all embedded Images from within a specified  pages in the PDF and returns them as System.Drawing.Image objects
            </summary>
            <param name="PageIndexes">An IEnumerable list of page indexes. </param>
            <returns>IEnumerable of raw image byte array.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.Merge(IronPdf.PdfDocument,IronPdf.PdfDocument)">
            <summary>
            Static method that joins (concatenates) 2 PDF documents together into one final PDF document. 
            </summary>
            <param name="A">A PDF</param>
            <param name="B">A Seconds PDF</param>
            <returns>
            A new merged PDF file.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.Merge(System.Collections.Generic.IEnumerable{IronPdf.PdfDocument})">
            <summary>
            Static method that joins (concatenates) multiple PDF documents together into one compiled PDF document. 
            </summary>
            <param name="PDFs">A IEnumerable of PdfDocument.  To merge existing PDF files you may use the PdfDocument.FromFile static method in conjunction with Merge.</param>
            <returns>
            The merged PDF file.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.AppendPdf(IronPdf.PdfDocument)">
            <summary>
            Appends another PDF to the end of the current PdfDocument
            </summary>
            <param name="AnotherPdfFile"> PdfDocument to append.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.PrependPdf(IronPdf.PdfDocument)">
            <summary>
            Adds another PDF to the beginning of the current PdfDocument
            </summary>
            <param name="AnotherPdfFile"> PdfDocument to prepend.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.InsertPdf(IronPdf.PdfDocument,System.Int32)">
            <summary>
            Inserts another PDF into of the current PdfDocument, starting at a given Page Index.
            </summary>
            <param name="AnotherPdfFile">Another PdfDocument.</param>
            <param name="AtIndex">Index at which to insert the new content.  Note: Page 1 has index 0...</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="P:IronPdf.PdfDocument.Pages">
            <summary>
            Gets the list of pages in the pdf document.
            </summary>
        </member>
        <member name="P:IronPdf.PdfDocument.PageCount">
            <summary>
            Gets the number of pages in the PDF document.         
            </summary>
            <value>
            The page count.
            </value>
        </member>
        <member name="M:IronPdf.PdfDocument.RemovePage(System.Int32)">
            <summary>
            Removes a page from the PDF at the given index.
            </summary>
            <param name="PageIndex">Index of the page.  Note: Page 1 has index 0...</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.RemovePages(System.Int32,System.Int32)">
            <summary>
            Removes a range of pages from the PDF
            </summary>
            <param name="StartIndex">The start index. Note: Page 1 has index 0 </param>
            <param name="EndIndex">The end index. Note: The last page has index <c>PageCount -1</c></param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.RemovePages(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes a range of pages from the PDF
            </summary>
            <param name="PageIndexes">An list of pages indexes to remove.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractAllText">
            <summary>
            Extracts the written text content from the PDF and returns it as a string. 
            Pages will be separated by 4 consecutive newline characters ("\n\n\n\n")
            </summary>
            <returns>
            All text in the PDF as a string.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractTextFromPage(System.Int32)">
            <summary>
            Extracts the text content from one page of the PDF and returns it as a string. 
            </summary>
            <param name="PageIndex">Index of the page.  Note: Page 1 has index 0...</param>
            <returns>The text extracted from the PDF page as a string. </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractTextFromPages(System.Int32,System.Int32)">
            <summary>
            Extracts the written text content from a range of pages within the PDF and returns it as a string.   
            Pages will be separated by 4 consecutive newline characters ("\n\n\n\n")
            </summary>
            <param name="StartIndex">The start page index. Note: Page 1 has index 0 </param>
            <param name="EndIndex">The end page index. Note: The last page has index <c>PageCount -1</c></param>
            <returns>The text extracted from the PDF pages as a string. </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ExtractTextFromPages(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Extracts the written text content from specified pages in the PDF PDF and returns it as a string.  
            Pages will be separated by 4 consecutive newline characters ("\n\n\n\n")
            </summary>
            <param name="PageIndexes">An IEnumerable list of page indexes. </param>
            <returns>The text extracted from the PDF pages as a string. </returns>
        </member>
        <member name="P:IronPdf.PdfDocument.SecuritySettings">
            <summary>
            Advanced security settings for the PDF.
            <para>Allows the developer to control user access passwords, encryption, and also who may edit, print and copy content from the PDF document</para>
            </summary>
            <value>
            Advanced security settings for this PDF as an instance of <see cref="T:IronPdf.PdfDocument.PdfSecuritySettings"/>
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.MetaData">
            <summary>
            MetaData information settings for the PDF.
            <para>Allows File meta-data to be read and set including: Authors, File Dates, Keywords, Title and Subject</para>
            </summary>
            <value>
            MetaData settings for this PDF as an instance of <see cref="T:IronPdf.PdfDocument.PdfMetaData"/>
            </value>
        </member>
        <member name="T:IronPdf.PdfDocument.PdfSecuritySettings">
            <summary>
            A class defining user security settings for a PDF document.
            <para>Allows the developer to control user access passwords, encryption, and also who may edit, print and copy content from the PDF document</para>
            <para>Implemented in <see cref="P:IronPdf.PdfDocument.SecuritySettings"/>. </para>
            </summary>
        </member>
        <member name="T:IronPdf.PdfDocument.PdfSecuritySettings.PdfPrintSecrity">
            <summary>
            Enumeration defining levels of PDF user access rights to print a PDF.
            <para>See <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserPrinting"/></para>
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.PdfSecuritySettings.PdfPrintSecrity.NoPrint">
            <summary>
            The user may not print the PDF unless they have the Owner password.
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.PdfSecuritySettings.PdfPrintSecrity.PrintLowQuality">
            <summary>
            The user may only print the PDF at low resolution unless they have the Owner password.
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.PdfSecuritySettings.PdfPrintSecrity.FullPrintRights">
            <summary>
            Users may print the PDF without restriction.
            </summary>
        </member>
        <member name="T:IronPdf.PdfDocument.PdfSecuritySettings.PdfEditSecurity">
            <summary>
            Enumeration defining levels of PDF user access rights to edit a PDF.  Edit rights may also be limited by the User's PDF document client software.
            <para>See <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserEdits"/></para>
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.PdfSecuritySettings.PdfEditSecurity.NoEdit">
            <summary>
            The user may not edit the PDF unless they have the Owner password.
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.PdfSecuritySettings.PdfEditSecurity.EditPages">
            <summary>
            The user may re-arrange pages, rotate pages and manage PDF thumbnails, but may not otherwise edit the PDF unless they have the Owner password.
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.PdfSecuritySettings.PdfEditSecurity.EditAll">
            <summary>
            The user may edit the PDF as allowed by their PDF client software.
            </summary>
        </member>
        <member name="M:IronPdf.PdfDocument.PdfSecuritySettings.MakePdfDocumentReadOnly(System.String)">
            <summary>
            Makes this PDF document read only such that:
            <para>Content is encrypted at 128 bit. Copy and paste of content is disallowed. Annotations and form editing are disabled. </para>
            </summary>
            <param name="OwnerPassword">The owner password for the PDF.  A string for owner password is required to enable PDF encryption and all document security options.</param>
        </member>
        <member name="M:IronPdf.PdfDocument.PdfSecuritySettings.RemovePasswordsAndEncryption">
            <summary>
            Removes all user and owner password security for a PDF document.  Also disables content encryption.
            <para>Content is encrypted at 128 bit. Copy and paste of content is disallowed. Annotations and form editing are disabled. </para>
            </summary>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfSecuritySettings.OwnerPassword">
            <summary>
            Sets the owner password and enables 128Bit encryption of PDF content. An owner password is one used to enable and disable all other security settings.
            <para>OwnerPassword must be set to a non empty string value for <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserCopyPasteContent"/>, <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserAnnotations"/>, <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserFormData"/>,s <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserPrinting"/> and <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserEdits"/> to be restricted. </para>
            </summary>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfSecuritySettings.UserPassword">
            <summary>
            Sets the user password and enables 128Bit encryption of PDF content .
            <para>A user password if a password that each user must enter to open or print the PDF document.</para>
            </summary>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserCopyPasteContent">
            <summary>
            Gets or sets the permissions for users to extract or 'copy &amp; paste' content (text and images) from f the PDF document.
            <para>If AllowUserCopyPasteContent is set <c>false</c>,  the <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.OwnerPassword"/> must also be set for the security measure to take effect.</para>
            </summary>
            <value>
              <c>true</c> if users may 'copy and paste' content out of the PDF otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserAnnotations">
            <summary>
            Gets or sets the permissions for users to annotate the PDF document with comments.
            <para>If AllowUserAnnotations is set <c>false</c>, the <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.OwnerPassword" /> must be set for the security measure to take effect.</para>
            </summary>
            <value>
              <c>true</c> if users may annotate the PDF document, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserFormData">
            <summary>
            Gets or sets the permissions for users to fill-in (enter data into) forms in the PDF document.
            <para>If AllowUserFormData is set <c>false</c>, the <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.OwnerPassword" /> must be set for the security measure to take effect.</para>
            <para>Note. If you want to make the form readonly in Adobe Acrobat Reader please call <see cref = "M:IronPdf.PdfDocument.PdfSecuritySettings.MakePdfDocumentReadOnly(System.String)"/>
            method or set <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserEdits"/> to <see cref="F:IronPdf.PdfDocument.PdfSecuritySettings.PdfEditSecurity.NoEdit"/> and set <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.OwnerPassword"/>.</para>
            </summary>
            <value>
              <c>true</c> if users may annotate the PDF document, otherwise <c>false</c>.  Setting AllowUserFormData true will also enable annotations.
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserPrinting">
            <summary>
            Gets or sets the permissions for users to print the PDF document.
            <para>If print rights are restricted, then the <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.OwnerPassword" /> must be set for the security measure to take effect.</para>
            </summary>
            <value>
            The <see cref="T:IronPdf.PdfDocument.PdfSecuritySettings.PdfPrintSecrity"/> value for user printing.
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfSecuritySettings.AllowUserEdits">
            <summary>
            Gets or sets the permissions for users edit the PDF document.  The features to edit the document depends entirely on the PDF client software used by the end user.
            <para>If editing rights are restricted, then the <see cref="P:IronPdf.PdfDocument.PdfSecuritySettings.OwnerPassword" /> must be set for the security measure to take effect.</para>
            </summary>
            <value>
            The <see cref="T:IronPdf.PdfDocument.PdfSecuritySettings.PdfEditSecurity"/> value for user edit security.
            </value>
        </member>
        <member name="T:IronPdf.PdfDocument.PdfMetaData">
            <summary>
            A class defining PDF file meta-data.
            <para>Allows File meta-data to be read and set including: Authors, File Dates, Keywords, Title and Subject</para>
            <para>Implemented in <see cref="P:IronPdf.PdfDocument.MetaData"/>. </para>
            </summary>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfMetaData.Author">
            <summary>
            Gets or sets the Author of the document.
            </summary>
            <value>
            The author name as a string.
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfMetaData.Creator">
            <summary>
            Gets or sets the Creator of the document.
            </summary>
            <value>
            The creator name as a string.
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfMetaData.Producer">
            <summary>
            Gets or sets the Producer of the document.
            </summary>
            <value>
            The producer name as a string.
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfMetaData.CreationDate">
            <summary>
            Gets or sets the PDF file creation DateTime.
            </summary>
            <value>
            DateTime of PDF file creation.
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfMetaData.Keywords">
            <summary>
            Gets or sets the Keywords of the document.  This helps search indexes and operating systems correctly index the PDF.
            </summary>
            <value>
            The Keywords of the document as a string.  It is customary to use comma separation between keywords.
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfMetaData.ModifiedDate">
            <summary>
            Gets or sets the PDF file last-modified DateTime.
            </summary>
            <value>
            DateTime of PDF file modification.
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfMetaData.Subject">
            <summary>
            Gets or sets the Subject of the document.  This helps search indexes and operating systems correctly index the PDF, and may appear in PDF viewer software.
            </summary>
            <value>
            The Subject of the document as a string. 
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfMetaData.Title">
            <summary>
            Gets or sets the Title of the document.  This helps search indexes and operating systems correctly index the PDF, and may appear in PDF viewer software.
            </summary>
            <value>
            The Title of the document as a string. 
            </value>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfMetaData.CustomProperties">
            <summary>
            Property defining custom metadata properties of the document.
            </summary>
        </member>
        <member name="T:IronPdf.PdfDocument.PdfCustomMetadataProperties">
            <summary>
            Class that represents set of custom metadata properties
            </summary>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfCustomMetadataProperties.Count">
            <summary>
            Gets the count of the <see cref="T:IronPdf.PdfDocument.PdfCustomMetadataProperties"/>.
            </summary>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfCustomMetadataProperties.Keys">
            <summary>
            Gets the collection of the <see cref="T:IronPdf.PdfDocument.PdfCustomMetadataProperties"/> keys.
            </summary>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfCustomMetadataProperties.Values">
            <summary>
            Gets the collection of the <see cref="T:IronPdf.PdfDocument.PdfCustomMetadataProperties"/> values.
            </summary>
        </member>
        <member name="P:IronPdf.PdfDocument.PdfCustomMetadataProperties.Item(System.String)">
            <summary>
            Gets or sets element value with the specified key.
            </summary>
            <param name="key">The key of the element.</param>
            <returns></returns>
        </member>
        <member name="M:IronPdf.PdfDocument.PdfCustomMetadataProperties.Add(System.String,System.String)">
            <summary>
            Method for adding property with the specified name and value.
            <para> You can convert value of any type to the string and store it in custom properties.</para>
            </summary>
            <param name="name">The name of the custom PDF MetaData Property.</param>
            <param name="value">The value of the custom PDF MetaData Property as a String.</param>
        </member>
        <member name="M:IronPdf.PdfDocument.PdfCustomMetadataProperties.Contains(System.String)">
            <summary>
            Method to check whether set of properties contains property with the specified name.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>
              <c>true</c> if property with the specified name exists, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.PdfCustomMetadataProperties.Remove(System.String)">
            <summary>
            Method for removing property by its name.
            </summary>
            <param name="name">The name of the property.</param>
            <returns><c>true</c> if property was removed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.GetPrintDocument">
            <summary>
            Returns a <see cref="T:System.Drawing.Printing.PrintDocument"/> for the PDF allowing developers granular control over sending the PDF to a Printer.
            <para>An assembly reference to System.Drawing is required in your project.</para>
            <para>
            Available in IronPDF for .Net Framework, and .Net Core.
            For Linux and OSX targets please install the PDFium library to your application or bin directory for this functionality to work.
            </para>
            </summary>
            <returns>A <see cref="T:System.Drawing.Printing.PrintDocument"/>.</returns>
            <exception cref="T:System.Exception">IronPdf must be licensed to use this feature.</exception>
            
        </member>
        <member name="M:IronPdf.PdfDocument.Print">
            <summary>
            Prints this PDF by sending it to the computer's default printer.  
            <para>Windows print UI dialogs will be displayed to the user.</para>
            <para>For advanced real-world printing options please see <see cref="M:IronPdf.PdfDocument.GetPrintDocument"/>.</para>
            <para> Available in IronPDF for .Net Framework, and .Net Core, but only for Windows and Azure machines.</para>
            </summary>
        </member>
        <member name="M:IronPdf.PdfDocument.ToBitmap(System.Int32)">
            <summary>
            Rasterizes (renders) the PDF into System.Drawing.Bitmap objects.  1 Bitmap for each page.
            <para>Please add an assembly reference to System.Drawing to use this "PDF To Image" method.</para><para>Please Dispose() each Bitmap object after use.</para>
            </summary>
            <param name="DPI">The resolution of the output Bitmap in 'Dots Per Inch'.  Higher DPI creates larger bitmap files of higher image quality.</param>
            <returns>
            An array of System.Drawing.Bitmap image objects which can be saved, manipulated, displayed or edited programmatically.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToBitmap(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Rasterizes (renders) the PDF into System.Drawing.Bitmap objects.
            <para>Specific pages may be selected using the PageNumbers parameter.</para>
            <para>Please add an assembly reference to System.Drawing to use this "PDF To Image" method</para>
            <para>Please Dispose() each Bitmap object after use.</para>
            </summary>
            <param name="pageNumbers">Specific page numbers may be given to only convert part of the PDF document to images</param>
            <param name="DPI">The desired resolution of the output Images.</param>
            <returns>
            An array of System.Drawing.Bitmap image objects which can be saved, manipulated, displayed or edited programmatically.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToBitmap(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Rasterizes (renders) the PDF into System.Drawing.Bitmap objects.
            <para>Specific pages may be selected using the PageNumbers parameter.  The Widths and Height of the output images may be specified.</para>
            <para>Please add an assembly reference to System.Drawing to use this "PDF To Image" method</para>
               <para>Please Dispose() each Bitmap object after use.</para>
            </summary>
            <param name="imageMaxWidth">The target maximum width(in mm) of the output images.</param>
            <param name="imageMaxHeight">The target maximum height(in mm) of the output images.</param>
            <param name="pageNumbers">Specific page numbers may be given to only convert part of the PDF document to images</param>
            <param name="DPI">The desired resolution of the output Images.</param>
            <returns>
            An array of System.Drawing.Bitmap image objects which can be saved, manipulated, displayed or edited programmatically.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.PageToBitmap(System.Int32,System.Int32)">
            <summary>
            Renders a single page of the PDF to a System.Drawing.Bitmap object.
            <para>Please add an assembly reference to System.Drawing to use this "PDF To Image" method</para><para>Please Dispose() each Bitmap object after use.</para>
            </summary>
            <param name="PageNumber">The page number to be converted to an image.</param>
            <param name="DPI">The desired resolution of the output Images.</param>
            <returns>A System.Drawing.Bitmap of the rendered PDF page.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.PageToBitmap(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Renders a single page of the PDF to a System.Drawing.Bitmap object.
            <para>Please add an assembly reference to System.Drawing to use this "PDF To Image" method</para>
               <para>Please Dispose() each Bitmap object after use.</para>
            </summary>
            <param name="pageNumber">The page number to be converted to an image.</param>
            <param name="imageMaxWidth">The target maximum width of the output images.</param>
            <param name="imageMaxHeight">The target maximum height of the output images.</param>
            <param name="DPI">The desired resolution of the output Images.</param>
            <returns>A System.Drawing.Bitmap of the rendered PDF page.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.RasterizeToImageFiles(System.String,IronPdf.ImageType,System.Int32)">
            <summary>
            Renders the PDF and exports image Files in convenient formats.  1 image file is created for each page.<para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            <para> Available in IronPDF for .Net Framework, and .Net Core, but only for Windows and Azure machines.</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_page_*.png</param>
            <param name="ImageFileType">Type of the image file.  If not specified, a best guess will be taken from the FileNamePattern file extension</param>
            <param name="DPI">The desired resolution of the output Images.</param>
            <returns>An array of the file paths of the image files created.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.RasterizeToImageFiles(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},IronPdf.ImageType,System.Int32)">
            <summary>
            Renders the PDF and exports image Files in convenient formats.  Image dimensions may be specified.  1 image file is created for each page.<para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_page_*.png</param>
            <param name="ImageFileType">Type of the image file.  If not specified, a best guess will be taken from the FileNamePattern file extension</param>
            <param name="ImageMaxWidth">The target maximum width of the output images.</param>
            <param name="ImageMaxHeight">The target maximum height of the output images.</param>
            <param name="DPI">The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.RasterizeToImageFiles(System.String,System.Collections.Generic.IEnumerable{System.Int32},IronPdf.ImageType,System.Int32)">
            <summary>
            Renders the PDF and exports image Files in convenient formats.  Page Numbers may be specified.  1 image file is created for each page.
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            <para> Available in IronPDF for .Net Framework, and .Net Core, but only for Windows and Azure machines.</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_page_*.png</param>
            <param name="ImageFileType">Type of the image file.  If not specified, a best guess will be taken from the FileNamePattern file extension</param>
            <param name="PageNumbers">A list of the specific page numbers to render as images.</param>
            <param name="DPI">The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.RasterizeToImageFiles(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},IronPdf.ImageType,System.Int32)">
            <summary>
            Renders the PDF and exports image Files in convenient formats.  Page Numbers may be specified.  1 image file is created for each page.
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            <para> Available in IronPDF for .Net Framework, and .Net Core, but only for Windows and Azure machines.</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_page_*.png</param>
            <param name="ImageFileType">Type of the image file.  If not specified, a best guess will be taken from the FileNamePattern file extension</param>
            <param name="PageNumbers">A list of the specific page numbers to render as images.</param>
            <param name="ImageMaxWidth">The target maximum width of the output images.</param>
            <param name="ImageMaxHeight">The target maximum height of the output images.</param>
            <param name="DPI">The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToJpegImages(System.String,System.Int32)">
            <summary>
            Renders the pages of the PDF as JPEG files and saves them to disk.
            <para>Specific image dimensions and page numbers may be given as optional parameters</para>
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_page_*.jpg</param>
            <param name="DPI">The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToJpegImages(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Renders the pages of the PDF as JPEG files and saves them to disk.
            <para>Specific image dimensions and page numbers may be given as optional parameters</para>
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            <para> Available in IronPDF for .Net Framework, and .Net Core, but only for Windows and Azure machines.</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_page_*.jpg</param>
            <param name="PageNumbers">A list of the specific page numbers to render as images.</param>
            <param name="DPI">The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToJpegImages(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Renders the pages of the PDF as JPEG files and saves them to disk.
            <para>Specific image dimensions and page numbers may be given as optional parameters</para>
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            <para> Available in IronPDF for .Net Framework, and .Net Core, but only for Windows and Azure machines.</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_page_*.jpg</param>
            <param name="ImageMaxWidth">The target maximum width of the output images.</param>
            <param name="ImageMaxHeight">The target maximum height of the output images.</param>
            <param name="DPI">The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToJpegImages(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Renders the pages of the PDF as JPEG files and saves them to disk.
            <para>Specific image dimensions and page numbers may be given as optional parameters</para>
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_page_*.jpg</param>
            <param name="PageNumbers">A list of the specific page numbers to render as images.</param>
            <param name="ImageMaxWidth">The target maximum width of the output images.</param>
            <param name="ImageMaxHeight">The target maximum height of the output images.</param>
            <param name="DPI">The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToPngImages(System.String,System.Int32)">
            <summary>
            Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk.
            <para>Specific image dimensions and page numbers may be given as optional parameters</para>
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_pages_*.png</param>
              <param name = "DPI" > The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToPngImages(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk.
            <para>Specific image dimensions and page numbers may be given as optional parameters</para>
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            <para> Available in IronPDF for .Net Framework, and .Net Core, but only for Windows and Azure machines.</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_pages_*.png</param>
            <param name="PageNumbers">A list of the specific page numbers to render as images.</param>
              <param name = "DPI" > The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToPngImages(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk.
            <para>Specific image dimensions and page numbers may be given as optional parameters</para>
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            <para> Available in IronPDF for .Net Framework, and .Net Core, but only for Windows and Azure machines.</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_pages_*.png</param>
            <param name="ImageMaxWidth">The target maximum width of the output images.</param>
            <param name="ImageMaxHeight">The target maximum height of the output images.</param>
             <param name = "DPI" > The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToPngImages(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk.
            <para>Specific image dimensions and page numbers may be given as optional parameters</para>
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            <para> Available in IronPDF for .Net Framework, and .Net Core, but only for Windows and Azure machines.</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_pages_*.png</param>
            <param name="PageNumbers">A list of the specific page numbers to render as images.</param>
            <param name="ImageMaxWidth">The target maximum width of the output images.</param>
            <param name="ImageMaxHeight">The target maximum height of the output images.</param>
              <param name = "DPI" > The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToTiffImages(System.String,System.Int32)">
            <summary>
            Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk.
            <para>Specific image dimensions and page numbers may be given as optional parameters</para>
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            <para> Available in IronPDF for .Net Framework, and .Net Core, but only for Windows and Azure machines.</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_pages_*.tiff</param>
              <param name = "DPI" > The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToTiffImages(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk.
            <para>Specific image dimensions and page numbers may be given as optional parameters</para>
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            <para> Available in IronPDF for .Net Framework, and .Net Core, but only for Windows and Azure machines.</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_pages_*.tiff</param>
            <param name="PageNumbers">A list of the specific page numbers to render as images.</param>
              <param name = "DPI" > The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToTiffImages(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk.
            <para>Specific image dimensions and page numbers may be given as optional parameters</para>
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_pages_*.tiff</param>
            <param name="ImageMaxWidth">The target maximum width of the output images.</param>
            <param name="ImageMaxHeight">The target maximum height of the output images.</param>
              <param name = "DPI" > The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.ToTiffImages(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk.
            <para>Specific image dimensions and page numbers may be given as optional parameters</para>
            <para>FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers</para>
            </summary>
            <param name="FileNamePattern">A full or partial file path for the output files containing an asterisk.  E.g.  C:\images\pdf_pages_*.tiff</param>
            <param name="PageNumbers">A list of the specific page numbers to render as images.</param>
            <param name="ImageMaxWidth">The target maximum width of the output images.</param>
            <param name="ImageMaxHeight">The target maximum height of the output images.</param>
              <param name = "DPI" > The desired resolution of the output Images.</param>
            <returns>
            An array of the file paths of the image files created.
            </returns>
        </member>
        <member name="M:IronPdf.PdfDocument.VerifyPdfSignatures">
            <summary>
            Verifies all the PDF signatures for this PDF document and returns <c>true</c> if there are no invalid signatures.
            </summary>
            <returns><c>true</c> file is signed and all digital signatures for this PDF document are currently valid. Editing a PDF document in any way will invalidate signatures.</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.VerifyPdfSignaturesInFile(System.String)">
            <summary>
            Verifies all the PDF signatures for a PDF file (by file path) and returns <c>true</c> if there are no invalid signatures.
            </summary>
            <param name="PdfFilePath">The full or relative PDF file path.</param>
            <returns>
              <c>true</c> if file is signed and all digital signatures for the PDF document are currently valid. Editing a PDF document in any way will invalidate signatures.
            </returns>
        </member>
        <member name="T:IronPdf.PdfDocument.WaterMarkLocation">
            <summary>
              Location for a simple watermark to be applied to a PDF page.
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.WaterMarkLocation.TopLeft">
            <summary>
            The top left of the page
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.WaterMarkLocation.TopCenter">
            <summary>
            The top center of the page
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.WaterMarkLocation.TopRight">
            <summary>
            The top right of the page
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.WaterMarkLocation.MiddleLeft">
            <summary>
            The middle left of the page
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.WaterMarkLocation.MiddleCenter">
            <summary>
            The dead center of the page
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.WaterMarkLocation.MiddleRight">
            <summary>
            The middle right of the page
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.WaterMarkLocation.BottomLeft">
            <summary>
            The bottom left of the page
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.WaterMarkLocation.BottomCenter">
            <summary>
            The bottom center of the page
            </summary>
        </member>
        <member name="F:IronPdf.PdfDocument.WaterMarkLocation.BottomRight">
            <summary>
            The bottom right of the page
            </summary>
        </member>
        <member name="M:IronPdf.PdfDocument.WatermarkPage(System.String,System.Int32,IronPdf.PdfDocument.WaterMarkLocation,System.Int32,System.Int32,System.String)">
            <summary>
            Watermarks a single page of this PDF with HTML content.
            <para>Watermarks are restricted to basic positioning and a 100mm by 100mm maximum size.  For more advanced options see <see cref="M:IronPdf.PdfDocument.StampHTML(IronPdf.HtmlStamp,System.Int32)" /></para>
            </summary>
            <param name="Html">The HTML fragment</param>
            <param name="PageIndexToWaterMark">The page index (zero-based page number) of this PDF to watermark.</param>
            <param name="Location">The location of the watermark. <see cref="T:IronPdf.PdfDocument.WaterMarkLocation" /></param>
            <param name="Opacity">The opacity of the watermark from 0-100%. 100 is opaque, 0 is invisible.</param>
            <param name="Rotation">The rotation of the watermark content in clockwise degrees.</param>
            <param name="Hyperlink">An optional hyperlink which the watermark will link to.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.WatermarkAllPages(System.String,IronPdf.PdfDocument.WaterMarkLocation,System.Int32,System.Int32,System.String)">
            <summary>
            Watermarks all pages of this PDF with HTML content.
            <para>Watermarks are restricted to basic positioning and a 100mm by 100mm maximum size.  For more advanced options see <see cref="M:IronPdf.PdfDocument.StampHTML(IronPdf.HtmlStamp)" /></para>
            </summary>
            <param name="Html">The HTML fragment</param>
            <param name="Location">The location of the watermark. <see cref="T:IronPdf.PdfDocument.WaterMarkLocation" /></param>
            <param name="Opacity">The opacity of the watermark from 0-100%. 100 is opaque, 0 is invisible.</param>
            <param name="Rotation">The rotation of the watermark content in clockwise degrees.</param>
            <param name="Hyperlink">An optional hyperlink which the watermark will link to.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="M:IronPdf.PdfDocument.WatermarkPages(System.String,System.Collections.Generic.IEnumerable{System.Int32},IronPdf.PdfDocument.WaterMarkLocation,System.Int32,System.Int32,System.String)">
            <summary>
            Watermarks all pages of this PDF with HTML content.
            <para>Watermarks are restricted to basic positioning and a 100mm by 100mm maximum size.  For more advanced options see <see cref="M:IronPdf.PdfDocument.StampHTML(IronPdf.HtmlStamp,System.Collections.Generic.IEnumerable{System.Int32})" /></para>
            </summary>
            <param name="Html">The HTML fragment</param>
            <param name="PageIndexesToWaterMark">A list of page index (zero-based page number) of this PDF to watermark.</param>
            <param name="Location">The location of the watermark. <see cref="T:IronPdf.PdfDocument.WaterMarkLocation" /></param>
            <param name="Opacity">The opacity of the watermark from 0-100%. 100 is opaque, 0 is invisible.</param>
            <param name="Rotation">The rotation of the watermark content in clockwise degrees.</param>
            <param name="Hyperlink">An optional hyperlink which the watermark will link to.</param>
            <returns>Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style</returns>
        </member>
        <member name="T:IronPdf.PdfOutline">
            <summary>
            A editable collection of PDF navigational bookmark objects.
            </summary>
        </member>
        <member name="M:IronPdf.PdfOutline.RemoveBookMark(IronPdf.PdfBookMark)">
            <summary>
            Removes a single book mark from the BookMarkList
            </summary>
            <param name="BookMark">The bookmark object to remove.</param>
        </member>
        <member name="M:IronPdf.PdfOutline.RemoveBookMarkAt(System.Int32)">
            <summary>
            Removes a single book mark from the BookMarkList
            </summary>
            <param name="Index">The index of the bookmark to remove.</param>
        </member>
        <member name="M:IronPdf.PdfOutline.AddBookMarkAtEnd(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a bookmark at the end of the document outline.
            </summary>
            <param name="Text">The display text for the link.</param>
            <param name="PageIndex">The zero based page number to link to.  E.g.  Page 1 has a PageIndex of 0</param>
            <param name="IndentLevel">The indent level in the outline.  An IndentLevel of zero is in the root.  An IndentLevel of N  will be nested inside the most recent previous bookmark of IndentLevel N-1. </param>
        </member>
        <member name="M:IronPdf.PdfOutline.AddBookMarkAtStart(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a bookmark at the start of the document outline.
            </summary>
            <param name="Text">The display text for the link.</param>
            <param name="PageIndex">The zero based page number to link to.  E.g.  Page 1 has a PageIndex of 0</param>
            <param name="IndentLevel">The indent level in the outline.  An IndentLevel of zero is in the root.  An IndentLevel of N  will be nested inside the most recent previous bookmark of IndentLevel N-1. </param>
        </member>
        <member name="M:IronPdf.PdfOutline.InsertBookMark(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Insert a bookmark at the start of the document outline.
            </summary>
            <param name="Position">The position of the bookmark in the BookMark list.</param>
            <param name="Text">The display text for the link.</param>
            <param name="PageIndex">The zero based page number to link to.  E.g.  Page 1 has a PageIndex of 0</param>
            <param name="IndentLevel">The indent level in the outline.  An IndentLevel of zero is in the root.  An IndentLevel of N  will be nested inside the most recent previous bookmark of IndentLevel N-1.</param>
        </member>
        <member name="P:IronPdf.PdfOutline.BookMarkList">
            <summary>
            Gets the full list of current outline book marks.
            </summary>
            <value>
            The PDF documents full collection of bookmarks.
            </value>
        </member>
        <member name="M:IronPdf.PdfOutline.Clean">
            <summary>
            Removes all existing bookmarks from the PDF
            </summary>
        </member>
        <member name="T:IronPdf.PdfBookMark">
            <summary>
            Represents a PDF bookmark as seen in the sidebar of PDF reader software to help user's navigate. 
            </summary>
        </member>
        <member name="F:IronPdf.PdfBookMark.IndentLevel">
            <summary>
            The indent level of the bookmark in the outline.
            <para>An indent level of 0 represents a bookmark in the root.  A bookmark of N will be nested inside the most recent previous bookmark of IndentLevel N-1. </para>
            </summary>
        </member>
        <member name="F:IronPdf.PdfBookMark.Text">
            <summary>
            The display text of the bookmark
            </summary>
        </member>
        <member name="P:IronPdf.PdfBookMark.PageIndex">
            <summary>
            The zero based page number that the bookmark links to.
            </summary>
            <value>
            The index of the page.
            </value>
        </member>
        <member name="F:IronPdf.PdfBookMark.PageID">
            
        </member>
        <member name="T:IronPdf.HtmlStamp">
            <summary>
            Class HtmlStamp.  Used With the <see cref="M:IronPdf.PdfDocument.StampHTML(IronPdf.HtmlStamp)"/> methods to edit PDF documents by 'stamping' additional content into the foreground or background.
            </summary>
        </member>
        <member name="M:IronPdf.HtmlStamp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IronPdf.HtmlStamp"/> class.
            </summary>
        </member>
        <member name="M:IronPdf.HtmlStamp.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IronPdf.HtmlStamp"/> class.
            </summary>
            <param name="Html">The HTML fragment which will be stamped onto your PDF.</param>
        </member>
        <member name="M:IronPdf.HtmlStamp.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IronPdf.HtmlStamp"/> class.
            </summary>
            <param name="Html">The HTML fragment which will be stamped onto your PDF.</param>
            <param name="WidthInMM">The width of the stamp in mm.</param>
            <param name="HeightInMM">The height  of the stamp in mm.</param>
        </member>
        <member name="P:IronPdf.HtmlStamp.Width">
            <summary>
            The width of the stamp in mm.  Stamps can not automatically detect their own size based on their content.
            </summary>
        </member>
        <member name="P:IronPdf.HtmlStamp.Height">
            <summary>
            The height of the stamp in mm.  Stamps can not automatically detect their own size based on their content.
            </summary>
        </member>
        <member name="F:IronPdf.HtmlStamp.Html">
            <summary>
            The HTML fragment which will be stamped onto your PDF.  All external  references to javascript, CSS and image files will be relative to <see cref="F:IronPdf.HtmlStamp.HtmlBaseUrl"/>.
            </summary>
        </member>
        <member name="P:IronPdf.HtmlStamp.Top">
            <summary>
            The position of the stamp from the Top edge of the PDF document in mm.  If Top or Bottom is not set, the stamp will be vertically centered in the document. 
            </summary>f
        </member>
        <member name="P:IronPdf.HtmlStamp.Bottom">
            <summary>
            The position of the stamp from the Bottom edge  of the PDF document in mm.  If Top or Bottom is not set, the stamp will be vertically centered in the document. 
            </summary>f
        </member>
        <member name="P:IronPdf.HtmlStamp.Left">
            <summary>
            The position of the stamp from the Left of the PDF document in mm.  If Left or Right is not set, the stamp will be horizontally centered in the document. 
            </summary>
        </member>
        <member name="P:IronPdf.HtmlStamp.Right">
            <summary>
            The position of the stamp from the Right of the PDF document in mm.  If Left or Right is not set, the stamp will be horizontally centered in the document. 
            </summary>
        </member>
        <member name="F:IronPdf.HtmlStamp.Opacity">
            <summary>
            Allows the stamp to be transparent. 0 is invisible, 100 if fully opaque.
            </summary>
        </member>
        <member name="F:IronPdf.HtmlStamp.Rotation">
            <summary>
            Rotates the stamp clockwise from 0 to 360 degrees as specified.
            </summary>
        </member>
        <member name="F:IronPdf.HtmlStamp.Hyperlink">
            <summary>
            Makes the entire stamp link to a web hyperlink. Note that HTML links created by &lt;a href=''&gt; tags are not reserved by stamping.
            </summary>
        </member>
        <member name="F:IronPdf.HtmlStamp.AutoCenterStampContentOnStampCanvas">
            <summary>
            The automatic centers stamp content within stamp canvas as defined by Width and Height.
            </summary>
        </member>
        <member name="F:IronPdf.HtmlStamp.HtmlBaseUrl">
            <summary>
            The HTML base URL for which references to external CSS, Javascript and Image files will be relative.
            <para>A trick to make references relative to a your project file is <code>HtmlBaseUrl = new Uri(System.Reflection.Assembly.GetEntryAssembly().Location).AbsoluteUri</code> </para>
            </summary>
        </member>
        <member name="T:IronPdf.HtmlStamp.StampLayer">
            <summary>
             Defines if a stamp should be placed behind or on-top of existing PDF contents.
            </summary>
        </member>
        <member name="F:IronPdf.HtmlStamp.StampLayer.BehindExistingPDFContent">
            <summary>
            Stamp in the background
            </summary>
        </member>
        <member name="F:IronPdf.HtmlStamp.StampLayer.OnTopOfExistingPDFContent">
            <summary>
            Stamp in the foreground
            </summary>
        </member>
        <member name="F:IronPdf.HtmlStamp.ZIndex">
            <summary>
             Defines if this stamp should be placed behind or on-top of existing PDF contents.
            </summary>
        </member>
        <member name="T:IronPdf.PdfPage">
            <summary>
            Class that represents pdf page.
            </summary>
        </member>
        <member name="P:IronPdf.PdfPage.Width">
            <summary>
            Gets the width of the pdf page.
            </summary>
        </member>
        <member name="P:IronPdf.PdfPage.Height">
            <summary>
            Gets the height of the pdf page.
            </summary>
        </member>
        <member name="P:IronPdf.PdfPage.PageOrientation">
            <summary>
            Gets the page orientation.
            </summary>
        </member>
        <member name="T:IronPdf.PageOrientation">
            <summary>
            Specifies the orientation of a page.
            </summary>
        </member>
        <member name="F:IronPdf.PageOrientation.Portrait">
            <summary>
            The default page orientation.
            </summary>
        </member>
        <member name="F:IronPdf.PageOrientation.Landscape">
            <summary>
            The width and height of the page are reversed.
            </summary>
        </member>
        <member name="T:IronPdf.PdfPagesCollection">
            <summary>
            Class for managing the collection of <see cref="T:IronPdf.PdfPage"/> elements.
            </summary>
        </member>
        <member name="M:IronPdf.PdfPagesCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:IronPdf.PdfPagesCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:IronPdf.PdfPage"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:IronPdf.PdfPage"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:IronPdf.PdfPagesCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>
            The count of pages.
            </value>
        </member>
        <member name="T:IronPdf.PdfPrintOptions">
            <summary>
            PDF output options for IronPdf.  
            Specifies options such as Paper-Size, DPI, Headers and Footers.  
            </summary>
        </member>
        <member name="P:IronPdf.PdfPrintOptions.ViewPortWidth">
            <summary>
            Defines a virtual screen width used to render HTML to PDF in IronPdf. Measured in pixels.
            <para>Viewport size is important in modern responsive HTML5 + CSS3 websites (e.g. Bootstrap framework websites) because the rendering and order of elements on the screen is dependent on viewport size. </para><para>The default viewport is 1280px wide by 1024px high to ensure the desktop version of a website is rendered unless otherwise specified.   Smaller sizes (particularly width) will render responsive versions of many website</para>
            </summary>
        </member>
        <member name="P:IronPdf.PdfPrintOptions.ViewPortHeight">
            <summary>
            Defines a virtual screen height used to render HTML to PDF in IronPdf. Measured in pixels.
            <para>Viewport size is important in modern responsive HTML5 + CSS3 websites (e.g. Bootstrap framework websites) because the rendering and order of elements on the screen is dependent on viewport size. </para>
            <para>The default viewport is 1280px wide by 1024px high to ensure the desktop version of a website is rendered unless otherwise specified.   Smaller sizes (particularly width) will render responsive versions of many websites.</para>
            </summary>
        </member>
        <member name="T:IronPdf.PdfPrintOptions.PdfPaperSize">
            <summary>
            Defines the target paper size the PDF will use of pagination.  Relates to real-world paper-sizes.
            </summary>
            
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Letter">
            8.5in x 11in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Legal">
            8.5in x 14in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A4">
            210mm x 297mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.CSheet">
            17in x 22in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.DSheet">
            22in x 34in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.ESheet">
            34in x 44in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.LetterSmall">
            8.5in x 11in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Tabloid">
            11in x 17in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Ledger">
            17in x 11in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Statement">
            5.5in x 8.5in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Executive">
            7.25in x 10.5in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A3">
            297mm x 420mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A4Small">
            210mm x 297mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A5">
            148mm x 210mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.B4">
            250mm x 353mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.B5">
            176mm x 250mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Folio">
            8.5in x 13in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Quarto">
            215mm x 275mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Standard10x14">
            10in x 14in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Standard11x17">
            11in x 17in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Note">
            8.5in x 11in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Number9Envelope">
            3.875in x 8.875in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Number10Envelope">
            4.125in x 9.5in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Number11Envelope">
            4.5in x 10.375in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Number12Envelope">
            4.75in x 11in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Number14Envelope">
            5in x 11.5in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.DLEnvelope">
            110mm x 220mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.C5Envelope">
            162mm x 229mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.C3Envelope">
            324mm x 458mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.C4Envelope">
            229mm x 324mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.C6Envelope">
            114mm x 162mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.C65Envelope">
            114mm x 229mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.B4Envelope">
            250mm x 353mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.B5Envelope">
            176mm x 250mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.B6Envelope">
            176mm x 125mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.ItalyEnvelope">
            110mm x 230mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.MonarchEnvelope">
            3.875in x 7.5in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PersonalEnvelope">
            3.625in x 6.5in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.USStandardFanfold">
            14.875in x 11in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.GermanStandardFanfold">
            8.5in x 12in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.GermanLegalFanfold">
            8.5in x 13in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.IsoB4">
            250mm x 353mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.JapanesePostcard">
            100mm x 148mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Standard9x11">
            9in x 11in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Standard10x11">
            10in x 11in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Standard15x11">
            15in x 11in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.InviteEnvelope">
            220mm x 220mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.LetterExtra">
            9.275in x 12in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.LegalExtra">
            9.275in x 15in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.TabloidExtra">
            11.69in x 18in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A4Extra">
            236mm x 322mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.LetterTransverse">
            8.275in x 11in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A4Transverse">
            210mm x 297mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.LetterExtraTransverse">
            9.275in x 12in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.APlus">
            227mm x 356mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.BPlus">
            305mm x 487mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.LetterPlus">
            8.5in x 12.69in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A4Plus">
            210mm x 330mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A5Transverse">
            148mm x 210mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.B5Transverse">
            182mm x 257mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A3Extra">
            322mm x 445mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A5Extra">
            174mm x 235mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.B5Extra">
            201mm x 276mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A2">
            420mm x 594mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A3Transverse">
            297mm x 420mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A3ExtraTransverse">
            322mm x 445mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.JapaneseDoublePostcard">
            200mm x 148mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A6">
            105mm x 148mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.LetterRotated">
            11in x 8.5in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A3Rotated">
            420mm x 297mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A4Rotated">
            297mm x 210mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A5Rotated">
            210mm x 148mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.B4JisRotated">
            364mm x 257mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.B5JisRotated">
            257mm x 182mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.JapanesePostcardRotated">
            148mm x 100mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.JapaneseDoublePostcardRotated">
            148mm x 200mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.A6Rotated">
            148mm x 105mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.B6Jis">
            128mm x 182mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.B6JisRotated">
            182mm x 128mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Standard12x11">
            12in x 11in
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Prc16K">
            146mm x 215mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Prc32K">
            97mm x 151mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Prc32KBig">
            97mm x 151mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber1">
            102mm x 165mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber2">
            102mm x 176mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber3">
            125mm x 176mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber4">
            110mm x 208mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber5">
            110mm x 220mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber6">
            120mm x 230mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber7">
            160mm x 230mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber8">
            120mm x 309mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber9">
            229mm x 324mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber10">
            324mm x 458mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Prc16KRotated">
            146mm x 215mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Prc32KRotated">
            97mm x 151mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Prc32KBigRotated">
            97mm x 151mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber1Rotated">
            165mm x 102mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber2Rotated">
            176mm x 102mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber3Rotated">
            176mm x 125mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber4Rotated">
            208mm x 110mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber5Rotated">
            220mm x 110mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber6Rotated">
            230mm x 120mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber7Rotated">
            230mm x 160mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber8Rotated">
            309mm x 120mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber9Rotated">
            324mm x 229mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.PrcEnvelopeNumber10Rotated">
            458mm x 324mm
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperSize.Custom">
            Set using PdfPrintOptions.SetCustomPaperSizeInInches or 
        </member>
        <member name="F:IronPdf.PdfPrintOptions.Header">
            <summary>
            Sets the header content for every PDF page as Html or String.  Supports 'mail-merge'.
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.Footer">
            <summary>
            Sets the footer content for every PDF page as Html or String.  Supports 'mail-merge'.
            </summary>
        </member>
        <member name="T:IronPdf.PdfPrintOptions.PdfPaperOrientation">
            <summary>
             Paper Orientation
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperOrientation.Portrait">
            Paper is oriented vertically
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfPaperOrientation.Landscape">
            Paper is oriented horizontally 
        </member>
        <member name="F:IronPdf.PdfPrintOptions.InputEncoding">
            <summary>
            The input character encoding as a string;
            </summary>
        </member>
        <member name="M:IronPdf.PdfPrintOptions.SetCustomPaperSize(System.Double,System.Double)">
            <summary>
            Sets the size of the custom paper. Depreciated.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:IronPdf.PdfPrintOptions.SetCustomPaperSizeinMilimeters(System.Double,System.Double)">
             <summary>
            Set an output paper size for PDF pages.  Dimensions are in millimeters. 
             </summary>
             <param name="width">Custom paper width in millimeters.</param> 
             <param name="height">>Custom paper height in millimeters.</param> 
        </member>
        <member name="M:IronPdf.PdfPrintOptions.SetCustomPaperSizeInInches(System.Double,System.Double)">
             <summary>
            Set an output paper size for PDF pages.  Dimensions are in Inches. 
             </summary>
             <param name="width">Custom paper width in Inches.</param> 
             <param name="height">>Custom paper height in Inches.</param> 
        </member>
        <member name="F:IronPdf.PdfPrintOptions.Zoom">
            <summary>
            The zoom level in %.  Enlarges the rendering size of Html documents.
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.DPI">
            <summary>
            Printing output DPI.  300 is standard for most print jobs.  Higher resolutions produce clearer images and text, but also larger PDF files.
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.GrayScale">
            <summary>
            Outputs a black-and-white PDF
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.CustomCssUrl">
            <summary>
            Allows a custom CSS style-sheet  to be applied to Html before rendering.  May be a local file path,  or remote url.
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.JpegQuality">
            <summary>
            Quality of any image that must be re-sampled. 0-100
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.MarginLeft">
             <summary>
            Paper margin in millimeters.  Set to zero for border-less and commercial printing applications.
             </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.MarginBottom">
             <summary>
            Paper margin in millimeters.  Set to zero for border-less and commercial printing applications.
             </summary>
             
        </member>
        <member name="F:IronPdf.PdfPrintOptions.MarginTop">
             <summary>
            Paper margin in millimeters.  Set to zero for border-less and commercial printing applications.  
             </summary>
             
        </member>
        <member name="F:IronPdf.PdfPrintOptions.MarginRight">
             <summary>
            Paper margin in millimeters.  Set to zero for border-less and commercial printing applications.
             </summary>
             
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PaperSize">
            <summary>
            Set an output paper size for PDF pages.  System.Drawing.Printing.PaperKind. <para>Use SetCustomPaperSize(int width, int height) for custom sizes.</para>
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PaperOrientation">
            <summary>
            The PDF paper orientation.  
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PrintHtmlBackgrounds">
            <summary>
             Prints background-colors and images from Html
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.CssMediaType">
            <summary>
             Enables Media="screen" CSS Styles  and StyleSheets
            <para>Note: By setting AllowScreenCss=false, IronPdf prints using CSS for media="print" only.</para>
            </summary>
        </member>
        <member name="T:IronPdf.PdfPrintOptions.PdfCssMediaType">
            <summary>
            Defines which style-sheet should be rendered.   'Print' or 'Screen'.  This matches the CSS3 Media Queries standard.
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfCssMediaType.Print">
            Renders as expected for a web browser.
        </member>
        <member name="F:IronPdf.PdfPrintOptions.PdfCssMediaType.Screen">
            Ignores 'Print' styles and includes additional 'Screen' styles where available.
        </member>
        <member name="F:IronPdf.PdfPrintOptions.EnableJavaScript">
            <summary>
             Enables JavaScript and Json to be executed  before the page is rendered.  Ideal for printing from Ajax / Angular Applications.
            <para>Also see <see cref="F:IronPdf.PdfPrintOptions.RenderDelay"/></para>
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.CreatePdfFormsFromHtml">
            <summary>
             Turns all Html forms elements into editable PDF forms.
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.Title">
            <summary>
             PDF Document Name and Title meta-data.  Not required.
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.FitToPaperWidth">
            <summary>
             Where possible, shrinks the PDF content to 1 page of paper width.
             <para>This applies when the PDF content is too wide for the given PaperSize (given that 1 HTML pixel = 1 DPI).</para>
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.RenderDelay">
            <summary>
                Milliseconds to wait after Html is rendered before printing.  This can use useful when
                considering the rendering of JavaScript, Ajax or animations.
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.FirstPageNumber">
            <summary>
             First page number to be used in PDF headers and footers.
            </summary>
        </member>
        <member name="T:IronPdf.PdfPrintOptions.ViewPortSize">
            <summary>
            Defines a virtual screen size used to render HTML to PDF in IronPdf.
            <para>Viewport size is important in modern responsive HTML5 + CSS3 websites (e.g. Bootstrap framework websites) because the rendering and order of elements on the screen is dependent on viewport size. </para>
            <para>The default viewport is 1280px wide by 1024px high to ensure the desktop version of a website is rendered unless otherwise specified.   Smaller sizes (particularly width) will render responsive versions of many websites.</para>
            <para>See http://viewportsizes.com/ to find viewport sizes for common desktop, tablet and mobile devices.</para>
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.ViewPortSize.Width">
            <summary>
              <para>The width of the 'virtual browser window' into which your HTML is rendered.  Measured in pixels. </para>
              <para>The default of 1280px represents a large desktop browser window.</para>
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.ViewPortSize.Height">
            <summary>The height of the 'virtual browser window' into which your HTML is rendered.  Measured in pixels. 
            <para>The default of 1024px represents a large desktop browser window.</para>
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.ViewPortSize.LargeDesktop">
            <summary>
              <para>1280px by 1024px</para>
              <para>A default ViewportSize for large desktop devices.</para>
              <para>Corresponds to the Bootstrap responsive class .col-lg-$</para>
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.ViewPortSize.Desktop">
            <summary>
               <para>1024px by 768px</para>
              <para>A default ViewportSize for smaller desktop and notebook devices. Also renders the same as an iPad in portrait mode.</para>
              <para>Corresponds to the Bootstrap responsive class .col-md-$</para>
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.ViewPortSize.Tablet">
            <summary>
            <para>800px by 1280px</para>
              <para>A default ViewportSize for Tablet devices.</para>
              <para>Corresponds to the Bootstrap responsive class .col-sm-$</para>
            </summary>
        </member>
        <member name="F:IronPdf.PdfPrintOptions.ViewPortSize.Phone">
            <summary>
            <para>480px by 320px</para>
              <para>A default ViewportSize for Phone and small mobile devices</para>
              <para>Corresponds to the Bootstrap responsive class .col-xs-$</para>
            </summary>
        </member>
        <member name="M:IronPdf.PdfPrintOptions.ViewPortSize.ToString">
            <summary>
              <para>String representation of viewport size. </para>
              <para>E.g. "1280x1024"</para>
            </summary>
        </member>
        <member name="T:IronPdf.License">
             <summary>
              Allows IronPdf license keys to be applied globally across an application.
             </summary>
            
        </member>
        <member name="F:IronPdf.License.LicenseKey">
             <summary>
              Removes watermarks. Get Licensed at http://ironpdf.com/license
              <para>For .Net framework applications, a license key can alternatively be added to Web.Config or App.Config XML file using  &lt;add key="IronPdf.LicenseKey" value="IRONPDF-LICENSE-KEY"/&gt; within the appSettings tag. See https://ironpdf.com/docs/license/license-keys/</para>
              <para>For .Net Core applications, a license key  may be added to appsettings.json where the key name is "IronPdf.LicenseKey" and the value is a valid IronPDF trial or full license key.</para>
            <para>See https://ironpdf.com/licensing/ for licensing options.</para>
             </summary>
            
        </member>
        <member name="F:IronPdf.License.SimulateNoLicenseKey">
            Internal testing use only
            <exclude />
        </member>
        <member name="M:IronPdf.License.IsValidLicense(System.String)">
            <summary>
            Determines whether a string license key is valid.
             <para>See https://ironpdf.com/licensing/ for trial, development and commercial deployment licensing options.</para>
            </summary>
            <param name="LicenseKey">IronPDF license key as a string</param>
            <returns>True if the license key given is valid.</returns>
        </member>
        <member name="P:IronPdf.License.IsLicensed">
             <summary>
             Determines whether this instance of IronPDF is Licensed.
             <para>Will return false unless a <see cref="F:IronPdf.License.LicenseKey"></see> is set to a valid trial or full license key in IronPdf.License.LicenseKey, Web.Config , App.Config or appsettings.json in .Net Core.</para>
            <para>See https://ironpdf.com/licensing/ and https://ironpdf.com/docs/license/license-keys/ </para>
             </summary>
             <returns>True if the license key given is valid.</returns>
        </member>
        <member name="T:IronPdf.PdfResource">
            <exclude />
        </member>
        <member name="M:IronPdf.PdfResource.#ctor(System.Byte[],System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.PdfResource.#ctor(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:IronPdf.PdfResource.#ctor(System.IO.Stream,System.String)">
            <exclude />
        </member>
        <member name="T:IronPdf.ImageType">
            <summary>
             An Image File Type Enumeration used to select image file formats when converting PDF documents to images.
             Also see: <see cref="M:IronPdf.PdfDocument.RasterizeToImageFiles(System.String,IronPdf.ImageType,System.Int32)"/>
            </summary>
        </member>
        <member name="F:IronPdf.ImageType.Default">
            <summary>
            Default file type.  WIll save images in a Bitmap file type unless a file pattern ends in an image file format such as .png or .jpeg
            </summary>
        </member>
        <member name="F:IronPdf.ImageType.Bitmap">
            <summary>
            PDF pages will be rendered to windows Bitmap image files.
            </summary>
        </member>
        <member name="F:IronPdf.ImageType.Jpeg">
            <summary>
            PDF pages will be rendered to JPEG image files.
            </summary>
        </member>
        <member name="F:IronPdf.ImageType.Png">
            <summary>
            PDF pages will be rendered to PNG (Portable Network Graphics) image files.
            </summary>
        </member>
        <member name="F:IronPdf.ImageType.Gif">
            <summary>
            PDF pages will be rendered to non-animated GIF image files.
            The GIF
            </summary>
        </member>
        <member name="F:IronPdf.ImageType.Tiff">
            <summary>
            PDF pages will be rendered to TIFF image files.
            </summary>
        </member>
        <member name="T:IronPdf.PdfSignature">
            <summary>
            A class that represents a PDF signing certificate (.PFX or .p12) format which can be used to digitally sign a PDF. This protecting it from alteration.
            <para>Not implemented in .Net Core</para>
            </summary>
            
        </member>
        <member name="M:IronPdf.PdfSignature.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IronPdf.PdfSignature"/> class using a .pfx or .p12 digital signature file.
            </summary>
            <param name="FilePathToCertificate">The file path to certificate.</param>
            <param name="Password">The certificate's password.</param>
        </member>
        <member name="M:IronPdf.PdfSignature.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IronPdf.PdfSignature"/> class.
            </summary>
            <param name="CertificateRawData">The certificate as a binary data (byte array).</param>
            <param name="Password">The certificate's password.</param>
        </member>
        <member name="M:IronPdf.PdfSignature.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes a new instance of the <see cref="T:IronPdf.PdfSignature"/> class.
            </summary>
            <param name="ExportableNativeCertificate">The exportable native certificate as a System.Security.Cryptography.X509Certificates.X509Certificate2.</param>
        </member>
        <member name="F:IronPdf.PdfSignature.SigningReason">
            <summary>
            The reason the PDF was signed (optional).
            </summary>
        </member>
        <member name="F:IronPdf.PdfSignature.SigningLocation">
            <summary>
            The physical location the PDF was signed (optional).
            </summary>
        </member>
        <member name="F:IronPdf.PdfSignature.SigningContact">
            <summary>
            The contact person or email address for signing related inquiries (optional).
            </summary>
        </member>
        <member name="F:IronPdf.PdfSignature.SignatureImage">
            <summary>
            A visual image for the sign, often a PNG of a human signature or company stamp (optional).
            <para>This appends a visual signature in addition to  cryptographic signing.</para>
            <seealso cref="M:IronPdf.PdfSignature.LoadSignatureImageFromFile(System.String)"/> <seealso cref="M:IronPdf.PdfSignature.LoadSignatureImageFromStream(System.IO.Stream)"/>
            </summary>
        </member>
        <member name="M:IronPdf.PdfSignature.LoadSignatureImageFromFile(System.String)">
            <summary>
            Loads a signature image from an image file.
            This appends a visual signature in addition to  cryptographic signing.
            </summary>
            <param name="FilePath">The file path.</param>
        </member>
        <member name="M:IronPdf.PdfSignature.LoadSignatureImageFromStream(System.IO.Stream)">
            <summary>
            Loads a signature image from a stream.
            This appends visual signature in addition to  cryptographic signing.
            </summary>
            <param name="Stream">The image file as a stream.</param>
        </member>
        <member name="M:IronPdf.PdfSignature.SignPdfFile(System.String,System.Boolean)">
            <summary>
            Signs an existing PDF file.
            </summary>
            <param name="PdfFilePath">The PDF file path.</param>
            <param name="RemoveOldSignatures">if set to <c>true</c> old digital signatures are removed to ensure signing validity.</param>
            <returns>
              <c>true</c> if successful.
            </returns>
        </member>
        <member name="F:IronPdf.PdfSignature.SignatureDate">
            <summary>
            The date and time of the digital signature. 
            If left null, the signature will be timestamped at the millisecond that the PdfDocument is saved to Disk or Stream.
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfUnicodeExtensions.FromUnicode(System.Collections.Generic.Dictionary{System.String,PdfSharp.Pdf.PdfObject})">
            <summary>
            Uses the Font object to translate CID encoded text to readable text
            </summary>
            <param name="pdfFonts">A List of PDFObjects containing the /Font object containing a /ToUnicode with a CMap</param>
        </member>
        <member name="T:PdfSharp.Pdf.PdfArrayExtensions">
            <summary>
            Extension methods for the PdfSharp library PdfArray object
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfArrayExtensions.Dump(PdfSharp.Pdf.PdfArray,System.Action{PdfSharp.Pdf.PdfItem})">
            <summary>
            Helper method for inspecting the contents of the dictionary / dumping the contents to the specified output.
            </summary>
            <param name="array">The array to dump.</param>
            <param name="output">The optional output method. If not provided, then the output will be directed to standard output.</param>
        </member>
        <member name="M:PdfSharp.Pdf.PdfArrayExtensions.IsEmpty(PdfSharp.Pdf.PdfArray)">
            <summary>
            Checks to see if the specified PdfArray is empty.
            </summary>
            <param name="array">The array to inspect.</param>
            <returns>True if empty (or null), false if contains 1 or more elements.</returns>
        </member>
        <member name="T:PdfSharp.Pdf.PdfDictionaryExtensions">
            <summary>
            Extension methods for the PdfSharp library PdfDictionary object for exporting images.
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.Dump(PdfSharp.Pdf.PdfDictionary,System.Action{PdfSharp.Pdf.PdfName,PdfSharp.Pdf.PdfItem})">
            <summary>
            Helper method for inspecting the contents of the dictionary / dumping the contents to the specified output.
            </summary>
            <param name="dictionary">The dictionary to dump.</param>
            <param name="output">The optional output method. If not provided, then the output will be directed to standard output.</param>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.IsImage(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Checks to see if the specified dictionary contains an image.
            </summary>
            <param name="dictionary">The dictionary to inspect.</param>
            <returns>True if the dictionary contains an image, false if otherwise.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.RawImageFromDCTDecode(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Retrieves the specified dictionary object as an object encoded with DCTDecode filter (JPEG).
            </summary>
            <param name="dictionary">The dictionary to extract the object from.</param>
            <returns>The image retrieve from the dictionary. If not found or an invalid image, then null is returned.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.ImageFromDCTDecode(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Retrieves the specified dictionary object as an object encoded with DCTDecode filter (JPEG).
            </summary>
            <param name="dictionary">The dictionary to extract the object from.</param>
            <returns>The image retrieve from the dictionary. If not found or an invalid image, then null is returned.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.GetPixelFormat(PdfSharp.Pdf.PdfDictionaryExtensions.PdfColorSpace,System.Int32,System.Boolean)">
            <summary>
            Gets the PixelFormat for the specified bits per pixel (bpp) or color depth.
            </summary>
            <param name="colorSpace">The color-space of the image.</param>
            <param name="bitsPerPixel">The number of bits per pixel.</param>
            <param name="isIndexed">Optional parameters indicating if the bits are indexed. If indexed, then bitsPerPixel must be less than or equal to 8. Defaults to false.</param>
            <returns>The pixel format to read the data from.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.WriteTiffTag(System.IO.Stream,BitMiracle.LibTiff.Classic.TiffTag,BitMiracle.LibTiff.Classic.TiffType,System.UInt32,System.UInt32)">
            <summary>
            Writes the specified TIFF tag data to the stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="tag">The <see cref="T:BitMiracle.LibTiff.Classic.TiffTag"/> to write.</param>
            <param name="type">The <see cref="T:BitMiracle.LibTiff.Classic.TiffType"/> being written.</param>
            <param name="count">The number of values being written.</param>
            <param name="value">The actual value to be written.</param>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.GetTiffImageBufferFromCCITTFaxDecode(PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryImageMetaData,System.Byte[])">
            <summary>
            Prepends a proper TIFF image header to the CCITTFaxDecode image data.
            </summary>
            <param name="imageData">The meta-data about the image.</param>
            <param name="image">The original compressed image.</param>
            <returns>A properly formatted TIFF header and the compressed image data.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.RawImageFromCCITTFaxDecode(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Retrieves the specified dictionary object as an object encoded with CCITTFaxDecode filter (TIFF).
            </summary>
            <param name="dictionary">The dictionary to extract the object from.</param>
            <returns>The image retrieve from the dictionary. If not found or an invalid image, then null is returned.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.RawImageFromFlateDecode(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Retrieves the specified dictionary object as an object encoded with FlateDecode filter.
            </summary>
            <remarks>
            FlateDecode a commonly used filter based on the zlib/deflate algorithm (a.k.a. gzip, but not zip) 
            defined in RFC 1950 and RFC 1951; introduced in PDF 1.2; it can use one of two groups of predictor 
            functions for more compact zlib/deflate compression: Predictor 2 from the TIFF 6.0 specification 
            and predictors (filters) from the PNG specification (RFC 2083)
            </remarks>
            <param name="dictionary">The dictionary to extract the object from.</param>
            <returns>The image retrieve from the dictionary. If not found or an invalid image, then null is returned.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.ImageFromCCITTFaxDecode(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Retrieves the specified dictionary object as an object encoded with CCITTFaxDecode filter (TIFF).
            </summary>
            <param name="dictionary">The dictionary to extract the object from.</param>
            <returns>The image retrieve from the dictionary. If not found or an invalid image, then null is returned.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.ImageFromFlateDecode(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Retrieves the specified dictionary object as an object encoded with FlateDecode filter.
            </summary>
            <remarks>
            FlateDecode a commonly used filter based on the zlib/deflate algorithm (a.k.a. gzip, but not zip) 
            defined in RFC 1950 and RFC 1951; introduced in PDF 1.2; it can use one of two groups of predictor 
            functions for more compact zlib/deflate compression: Predictor 2 from the TIFF 6.0 specification 
            and predictors (filters) from the PNG specification (RFC 2083)
            </remarks>
            <param name="dictionary">The dictionary to extract the object from.</param>
            <returns>The image retrieve from the dictionary. If not found or an invalid image, then null is returned.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.ConvertRGBStreamToBGR(System.Byte[])">
            <summary>
            Converts an RGB ordered stream to BGR ordering. 
            </summary>
            <remarks>
            A PDF /DeviceRGB stream is stored in RGB ordering, however the .NET Image libraries expect BGR ordering.
            </remarks>
            <param name="stream">The input stream to reorder. The input array will be modified inline by this procedure.</param>
            <returns>Return the modified input stream.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.ToImage(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Retrieves the image from the specified dictionary.
            </summary>
            <param name="dictionary">The dictionary to extract the image from.</param>
            <returns>Returns the image if valid, otherwise if the dictionary does not contain a valid image, then null is returned.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.ToRawImage(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Retrieves the image from the specified dictionary.
            </summary>
            <param name="dictionary">The dictionary to extract the image from.</param>
            <returns>Returns the image as byte array if valid, otherwise if the dictionary does not contain a valid image, then null is returned.</returns>
        </member>
        <member name="T:PdfSharp.Pdf.PdfDictionaryExtensions.PdfColorSpace">
            <summary>
            Internal class for working with a colorspace.
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfColorSpace.IsCMYK">
            <summary>Checks to see if the colorspace supports CYMK colors.</summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfColorSpace.IsRGB">
            <summary>Checks to see if the colorspace supports RGB colors.</summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfColorSpace.IsIndexed">
            <summary>Checks to see if the colorspace is an indexed colorspace.</summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfColorSpace.IsICCBased">
            <summary>Checks to see if the colorspace supports ICC profile.</summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfColorSpace.IsCalRgb">
            <summary>Checks to see if the colorspace is a CalRgb colorspace.</summary>
        </member>
        <member name="T:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedColorSpace">
            <summary>
            Internal class for working with an indexed colorspace.
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedColorSpace.Colors">
            <summary>The number of colors.</summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedColorSpace.IsIndexed">
            <summary>Checks to see if the colorspace is an indexed colorspace.</summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedColorSpace.#ctor(System.Int32)">
            <param name="colors">The number of colors.</param>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedColorSpace.GetRawPalette(PdfSharp.Pdf.PdfItem)">
            <summary>
            Retrieves the raw data for the colorspace.
            </summary>
            <returns>The raw data from the PdfArray of PdfReference.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedColorSpace.GetRawPalette(PdfSharp.Pdf.PdfArray)">
            <summary>
            Retrieves the raw data for the colorspace.
            </summary>
            <returns>The raw data from the PdfArray of PdfReference.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedColorSpace.GetRawPalette(PdfSharp.Pdf.Advanced.PdfReference)">
            <summary>
            Retrieves the raw data for the colorspace.
            </summary>
            <returns>The raw data from the PdfArray of PdfReference.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedColorSpace.CreateColorPalette(System.Int32)">
            <summary>
            Creates an empty color palette with the required number of colors.
            </summary>
            <param name="colors">The number of colors to create the palette with.</param>
            <returns>An empty <see cref="T:System.Drawing.Imaging.ColorPalette"/> with the required number of colors.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedColorSpace.CreateColorPalette(System.Drawing.Color[])">
            <summary>
            Creates an color palette filled with the specified colors.
            </summary>
            <param name="colors">The colors to fill / create the palette with.</param>
            <returns>An empty <see cref="T:System.Drawing.Imaging.ColorPalette"/> with the required number of colors.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedColorSpace.CreateColorPalette(System.Collections.Generic.IEnumerable{System.Drawing.Color})">
            <summary>
            Creates an color palette filled with the specified colors.
            </summary>
            <param name="colors">The colors to fill / create the palette with.</param>
            <returns>An empty <see cref="T:System.Drawing.Imaging.ColorPalette"/> with the required number of colors.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedColorSpace.CreateColorPalette">
            <summary>
            Creates an empty color palette with the required number of colors.
            </summary>
            <returns>An empty <see cref="T:System.Drawing.Imaging.ColorPalette"/> with the required number of colors.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedColorSpace.ToColorPalette">
            <summary>
            Converts the specified PDF colorspace to a Color space.
            </summary>
            <returns>The ColorPalette representing the raw palette.</returns>
        </member>
        <member name="T:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedRGBColorSpace">
            <summary>
            Internal class for working with an indexed RGB colorspace.
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedRGBColorSpace.Palette">
            <summary>The color palette for the colorspace.</summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedRGBColorSpace.IsRGB">
            <summary>Checks to see if the colorspace supports RGB colors.</summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedRGBColorSpace.#ctor(PdfSharp.Pdf.PdfItem,System.Int32)">
            <param name="colorSpace">The pdfItem representing the color space.</param>
            <param name="colors">The number of colors.</param>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedRGBColorSpace.GetColorPalette">
            <summary>
            Retrieves the color palette.
            </summary>
            <returns>The color palette for the indexed image.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIndexedRGBColorSpace.ToColorPalette">
            <summary>
            Converts the specified PDF colorspace to a Color space.
            </summary>
            <returns>The ColorPalette representing the raw palette.</returns>
        </member>
        <member name="T:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIccBasedColorSpace">
            <summary>
            Internal class for working with an IccBased colorspace.
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIccBasedColorSpace.ToColorPalette(System.Int32)">
            <summary>
            Converts the specified PDF colorspace to a Color space.
            </summary>
            <returns>The ColorPalette representing the raw palette.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfIccBasedIndexedColorSpace.ToColorPalette">
            <summary>
            Converts the specified PDF colorspace to a Color space.
            </summary>
            <returns>The ColorPalette representing the raw palette.</returns>
        </member>
        <member name="T:PdfSharp.Pdf.PdfDictionaryExtensions.PdfRGBColorSpace">
            <summary>
            Internal class for working with an RGB colorspace.
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfRGBColorSpace.IsRGB">
            <summary>Checks to see if the colorspace supports RGB colors.</summary>
        </member>
        <member name="T:PdfSharp.Pdf.PdfDictionaryExtensions.PdfGrayColorSpace">
            <summary>
            Internal class for working with a Gray colorspace
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfGrayColorSpace.ToColorPalette(System.Int32)">
            <summary>
            Converts the specified PDF colorspace to a Color space.
            </summary>
            <returns>The ColorPalette representing the raw palette.</returns>
        </member>
        <member name="T:PdfSharp.Pdf.PdfDictionaryExtensions.PdfCMYKColorSpace">
            <summary>
            Internal class for working with a CMYK colorspace.
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfCMYKColorSpace.IsCMYK">
            <summary>Checks to see if the colorspace supports CMYKcolors.</summary>
        </member>
        <member name="T:PdfSharp.Pdf.PdfDictionaryExtensions.PdfCalRgbColorSpace">
            <summary>
            Internal class for working with a CalRgb colorspace.
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfCalRgbColorSpace.ConvertABCStreamToRGB(System.Byte[])">
            <summary>
            Converts  ABC stream to RGB.
            </summary>
            <param name="abcStream">The ABC stream.</param>
            <returns>RGB stream</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfCalRgbColorSpace.GetXYZStream(System.Byte[])">
            <summary>
            Gets X, Y, Z values of the colorspace.
            </summary>
            <returns>Array containing X, Y, Z values</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfCalRgbColorSpace.GetRGBStream(System.Double[])">
            <summary>
            Converts XYZ stream to RGB stream.
            </summary>
            <param name="xyz">The XYZ stream.</param>
            <returns>RGB stream</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfCalRgbColorSpace.InitializeWhitePoint(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Gets the tristimulus value of the diffuse white point.
            </summary>
            <param name="dictItem">The dictionary containing the color space.</param>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfCalRgbColorSpace.InitializeBlackPoint(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Gets the tristimulus value of the diffuse black point.
            </summary>
            <param name="dictItem">The dictionary item containing the color space.</param>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfCalRgbColorSpace.InitializeGamma(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Gets the gamma of the red, green and blue components of the color space.
            </summary>
            <param name="dictItem">The dictionary item containing the color space.</param>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfCalRgbColorSpace.InitializeMatrix(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Gets the linear interpolation of the decoded A, B, C components of the color space.
            </summary>
            <param name="dictItem">The dictionary item containing the color space.</param>
        </member>
        <member name="T:PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryColorSpace">
            <summary>
            Internal class for extracting colorspace information from a dictionary.
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryColorSpace.GetColorSpaceName(PdfSharp.Pdf.PdfItem)">
            <summary>
            Get's the colorspace name for the specified item.
            </summary>
            <param name="colorSpace">The colorspace to inspect.</param>
            <returns>The PdfName of the specified item.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryColorSpace.Parse(PdfSharp.Pdf.PdfItem)">
            <summary>
            Parse the colorspace information from the specified colorspace item.
            </summary>
            <param name="colorSpace">The external color space object to parse.</param>
        </member>
        <member name="T:PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryImageMetaData">
            <summary>
            Internal class for extracting meta data from a dictionary.
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryImageMetaData.Length">
            <summary>The total length or size of the image data.</summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryImageMetaData.Height">
            <summary>The height of the stored image.</summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryImageMetaData.Width">
            <summary>The width of the stored image.</summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryImageMetaData.BitsPerPixel">
            <summary>The number of bits used to represent 1 pixel in the image. Commonly abbreviated as "bpp".</summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryImageMetaData.ColorSpace">
            <summary>The colorspace information for the image.</summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryImageMetaData.#ctor(PdfSharp.Pdf.PdfDictionary)">
            <param name="dictionary">The dictionary object o parse.</param>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryImageMetaData.Initialize(PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Initializes the item based on the specified PdfDictionary.
            </summary>
            <param name="dictionary">The dictionary to use for initialization.</param>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.PdfDictionaryImageMetaData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.CCITTFaxDecodeParameters.K">
            <summary>
            A code identifying the encoding scheme used: 
            
             less than 0 = Pure two-dimensional encoding (Group 4) 
             0 = Pure one-dimensional encoding (Group 3, 1-D) 
             more than 0 = Mixed one- and two-dimensional encoding (Group 3, 2-D), 
                  in which a line encoded one-dimensionally can be followed 
                  by at most K − 1 lines encoded two-dimensionally 
            
            The filter distinguishes among negative, zero, and positive values of 
            K to determine how to interpret the encoded data; however, it does 
            not distinguish between different positive K values. Default value: 0
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.CCITTFaxDecodeParameters.EndOfLine">
            <summary>
            A flag indicating whether end-of-line bit patterns are required to be 
            present in the encoding. The CCITTFaxDecode filter always accepts 
            end-of-line bit patterns, but requires them only if EndOfLine is true. 
            Default value: false.
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.CCITTFaxDecodeParameters.EncodedByteAlign">
            <summary>
            A flag indicating whether the filter expects extra 0 bits before each
            encoded line so that the line begins on a byte boundary. If true, the
            filter skips over encoded bits to begin decoding each line at a byte
            boundary. If false, the filter does not expect extra bits in the 
            encoded representation. Default value: false.
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.CCITTFaxDecodeParameters.Columns">
            <summary>
            The width of the image in pixels. If the value is not a multiple of 8,
            the filter adjusts the width of the unencoded image to the next 
            multiple of 8 so that each line starts on a byte boundary. 
            Default value: 1728
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.CCITTFaxDecodeParameters.Rows">
            <summary>
            The height of the image in scan lines. If the value is 0 or absent, the
            image’s height is not predetermined, and the encoded data must be
            terminated by an end-of-block bit pattern or by the end of the filter’s 
            data. Default value: 0.
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.CCITTFaxDecodeParameters.EndOfBlock">
            <summary>
            A flag indicating whether the filter expects the encoded data to be 
            terminated by an end-of-block pattern, overriding the Rows parameter.
            If false, the filter stops when it has decoded the number of lines 
            indicated by Rows or when its data has been exhausted, whichever occurs first.
            The end-of-block patter is the CCITT end-of-facsimile-block (EOFB) or
            return-to-control (RTC_ appropriate for the K parameter. 
            Default value: true.
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.CCITTFaxDecodeParameters.BlackIs1">
            <summary>
            A flag indicating whether 1 bits are to be interpreted as black pixels 
            and 0 bits as white pixels, the reverse of the normal PDF convention 
            for image data. Default value: false.
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.PdfDictionaryExtensions.CCITTFaxDecodeParameters.DamagedRowsBeforeError">
            <summary>
            The number of damaged rows of data to be tolerated before an error
            occurs. This entry applies only if EndOfLine is true and K is 
            non-negative. Tolerating a damaged row means locating its end in the
            encoded data by searching for an EndOfLine pattern and then 
            substituting decoded data from the previous row if the previous row
            was not damaged, or a white scan line if the previous row was also
            damaged. Default value: 0.
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDictionaryExtensions.CCITTFaxDecodeParameters.#ctor(PdfSharp.Pdf.PdfDictionary)">
            <param name="dictionary">The dictionary element to parse / retrieve.</param>
        </member>
        <member name="T:PdfSharp.Pdf.PdfDocumentExtensions">
            <summary>
            Extension methods for the PdfSharp library PdfItem object.
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfDocumentExtensions.GetImages(PdfSharp.Pdf.PdfDocument)">
            <summary>
            Get's all of the images from the specified document.
            </summary>
            <param name="document">The document to extract or retrieve images from.</param>
            <returns>An enumeration of images contained on the page.</returns>
        </member>
        <member name="T:PdfSharp.Pdf.PdfItemExtensions">
            <summary>
            Extension methods for the PdfSharp library PdfItem object.
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfItemExtensions.Get(PdfSharp.Pdf.PdfItem)">
            <summary>
            A helper for a PdfItem that will automatically lookup / fetch the corresponding
            PdfReference item if the item is a PdfReference. If the item is not a PdfItem, 
            then the original item is returned.
            </summary>
            <param name="item">The PdfItem to expand or fetch from.</param>
            <returns>The expanded PdfReference item if a PdfReference, otherwise the original item is returned.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfItemExtensions.IsBoolean(PdfSharp.Pdf.PdfItem)">
            <summary>
            Checks to see if the PdfItem can be represented as a PdfBoolean
            </summary>
            <param name="item">The item to inspect.</param>
            <returns>True if the item can be converted to a Boolean.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfItemExtensions.IsDate(PdfSharp.Pdf.PdfItem)">
            <summary>
            Checks to see if the PdfItem can be represented as a PdfDate
            </summary>
            <param name="item">The item to inspect.</param>
            <returns>True if the item can be converted to a Date.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfItemExtensions.IsLiteral(PdfSharp.Pdf.PdfItem)">
            <summary>
            Checks to see if the PdfItem can be represented as a PdfLiteral
            </summary>
            <param name="item">The item to inspect.</param>
            <returns>True if the item can be converted to a Literal.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfItemExtensions.IsName(PdfSharp.Pdf.PdfItem)">
            <summary>
            Checks to see if the PdfItem can be represented as a PdfName
            </summary>
            <param name="item">The item to inspect.</param>
            <returns>True if the item can be converted to a Name.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfItemExtensions.IsNull(PdfSharp.Pdf.PdfItem)">
            <summary>
            Checks to see if the PdfItem can be represented as a PdfNull
            </summary>
            <param name="item">The item to inspect.</param>
            <returns>True if the item can be converted to Null.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfItemExtensions.IsNumber(PdfSharp.Pdf.PdfItem)">
            <summary>
            Checks to see if the PdfItem can be represented as a PdfNumber
            </summary>
            <param name="item">The item to inspect.</param>
            <returns>True if the item can be converted to Number.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfItemExtensions.IsObject(PdfSharp.Pdf.PdfItem)">
            <summary>
            Checks to see if the PdfItem can be represented as a PdfObject
            </summary>
            <param name="item">The item to inspect.</param>
            <returns>True if the item can be converted to Object.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfItemExtensions.IsArray(PdfSharp.Pdf.PdfItem)">
            <summary>
            Checks to see if the PdfItem can be represented as a PdfArray
            </summary>
            <param name="item">The item to inspect.</param>
            <returns>True if the item can be converted to Array.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfItemExtensions.IsRectangle(PdfSharp.Pdf.PdfItem)">
            <summary>
            Checks to see if the PdfItem can be represented as a PdfRectangle
            </summary>
            <param name="item">The item to inspect.</param>
            <returns>True if the item can be converted to Rectangle.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfItemExtensions.IsReference(PdfSharp.Pdf.PdfItem)">
            <summary>
            Checks to see if the PdfItem can be represented as a PdfReference
            </summary>
            <param name="item">The item to inspect.</param>
            <returns>True if the item can be converted to Reference.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfItemExtensions.IsString(PdfSharp.Pdf.PdfItem)">
            <summary>
            Checks to see if the PdfItem can be represented as a PdfString
            </summary>
            <param name="item">The item to inspect.</param>
            <returns>True if the item can be converted to String.</returns>
        </member>
        <member name="T:PdfSharp.Pdf.PdfPageExtensions">
            <summary>
            Extension methods for the PdfSharp library PdfItem object.
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.PdfPageExtensions.GetImages(PdfSharp.Pdf.PdfPage,System.Func{PdfSharp.Pdf.PdfPage,System.Int32,System.Drawing.Image,System.Drawing.Image})">
            <summary>
            Get's all of the images from the specified page.
            </summary>
            <param name="page">The page to extract or retrieve images from.</param>
            <param name="filter">An optional filter to perform additional modifications or actions on the image.</param>
            <returns>An enumeration of images contained on the page.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfPageExtensions.GetRawImages(PdfSharp.Pdf.PdfPage,System.Func{PdfSharp.Pdf.PdfPage,System.Int32,System.Byte[],System.Byte[]})">
            <summary>
            Get's all of the images from the specified page.
            </summary>
            <param name="page">The page to extract or retrieve images from.</param>
            <param name="filter">An optional filter to perform additional modifications or actions on the image.</param>
            <returns>An enumeration of raw image byte arrays contained on the page.</returns>
        </member>
        <member name="M:PdfSharp.Pdf.PdfPageExtensions.FindObjects(System.String[],PdfSharp.Pdf.PdfItem)">
            <summary>
            Uses a recursive function to step through the PDF document tree to find the specified objects.
            </summary>
            <param name="objectHierarchy">An array of the names of objects to look for in the tree. Wildcards can be used in element names, e.g., /F*.</param> 
            <param name="startingObject">A PDF object to parse. This will likely be a document or a page, but could be any lower-level item</param>
        </member>
    </members>
</doc>
